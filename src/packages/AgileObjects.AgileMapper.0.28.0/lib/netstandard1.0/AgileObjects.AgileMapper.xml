<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgileObjects.AgileMapper</name>
    </assembly>
    <members>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.CustomDictionaryKeySpecifierBase`2">
            <summary>
            Provides base dictionary key configuration functionality for customising mappings
            to or from dictionaries.
            </summary>
            <typeparam name="TFirst">The first type argument necessary in the dictionary configuration.</typeparam>
            <typeparam name="TSecond">The second type argument necessary in the dictionary configuration.</typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.CustomDictionaryMappingTargetMemberSpecifier`2">
            <summary>
            Provides options for specifying a target member to which a dictionary configuration should apply.
            </summary>
            <typeparam name="TValue">
            The type of values stored in the dictionary to which the configuration will apply.
            </typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.CustomDictionaryMappingTargetMemberSpecifier`2.To``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Apply the configuration to the given <paramref name="targetMember"/>.
            </summary>
            <typeparam name="TTargetValue">The target member's type.</typeparam>
            <param name="targetMember">The target member to which to apply the configuration.</param>
            <returns>
            An ISourceDictionaryMappingConfigContinuation to enable further configuration of mappings from 
            dictionaries to the target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.CustomDictionaryMappingTargetMemberSpecifier`2.To``1(System.Linq.Expressions.Expression{System.Func{`1,System.Action{``0}}})">
            <summary>
            Apply the configuration to the given <paramref name="targetSetMethod"/>.
            </summary>
            <typeparam name="TTargetValue">The type of the target set method's argument.</typeparam>
            <param name="targetSetMethod">The target set method to which to apply the configuration.</param>
            <returns>
            A ISourceDictionaryMappingConfigContinuation to enable further configuration of mappings from 
            dictionaries to the target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ICustomTargetDictionaryKeySpecifier`2">
            <summary>
            Provides options for specifying custom target Dictionary keys to which configured
            source members should be mapped.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ICustomTargetDictionaryKeySpecifier`2.ToFullKey(System.String)">
            <summary>
            Configure a custom full Dictionary key to use in place of the configured source member's name
            when constructing a target Dictionary key. For example, calling 
            Map(address => address.Line1).ToFullKey("StreetName") will generate the key 'StreetName'
            when mapping an Address.Line1 property to a Dictionary, instead of the default 'Address.Line1'.
            Using this method with an enumerable or complex type member in a flattening mapping will throw 
            a MappingConfigurationException as those members are always mapped as parts of their child 
            members. Use <see cref="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ICustomTargetDictionaryKeySpecifier`2.ToMemberNameKey(System.String)"/> instead.
            </summary>
            <param name="fullMemberNameKey">
            The Dictionary key to which to map the value of the configured source member.
            </param>
            <returns>
            An ITargetDictionaryMappingConfigContinuation to enable further configuration of mappings between 
            the source and target Dictionary types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ICustomTargetDictionaryKeySpecifier`2.ToMemberNameKey(System.String)">
            <summary>
            Use the given <paramref name="memberNameKeyPart"/> in place of the configured source member's name
            when constructing a target Dictionary key. For example, calling 
            Map(address => address.Line1).ToMemberKey("StreetName") will generate the key 'Address.StreetName'
            when mapping an Address.Line1 property to a Dictionary, instead of the default 'Address.Line1'.
            </summary>
            <param name="memberNameKeyPart">
            The member key part to use in place of the configured source member's name.
            </param>
            <returns>
            An ITargetDictionaryMappingConfigContinuation to enable further configuration of mappings between 
            the source and target Dictionary types being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1">
            <summary>
            Provides options for configuring how this mapper will perform mappings from and to dictionaries.
            </summary>
            <typeparam name="TValue">
            The type of values stored in the dictionary to which the configurations will apply.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1.UseFlattenedTargetMemberNames">
            <summary>
            Construct keys for target Dictionary members using flattened member names. For example, 
            a Person.Address.StreetName member would be mapped to a Dictionary entry with the key 
            'AddressStreetName'.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1"/> with which to globally configure other 
            Dictionary mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/> to construct expected source and target Dictionary 
            keys, and to separate member names when mapping to nested complex type members of any target 
            type - the default is '.'. For example, calling UseMemberNameSeparator("_") will require a 
            Dictionary entry with the key 'Address_Line1' to map to an Address.Line1 member.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing expected Dictionary keys for 
            nested members.
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1"/> with which to globally configure other 
            Dictionary mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of an expected Dictionary key 
            representing an enumerable element - the default is '[i]'. The pattern must contain a single 
            'i' character as a placeholder for the enumerable index. For example, calling 
            UseElementKeyPattern("(i)") and mapping from a Dictionary to a collection of ints will generate 
            searches for keys '(0)', '(1)', '(2)', etc.
            </summary>
            <param name="pattern">
            The pattern to use to create an expected Dictionary key part representing an enumerable element.
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1"/> with which to globally configure other 
            Dictionary mapping aspects.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.IGlobalDictionarySettings`1.AndWhenMapping">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint"/>, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryConfigSettings`2">
            <summary>
            Provides options for configuring how mappers will perform mappings from Dictionaries to the 
            given <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TValue">
            The type of values stored in the Dictionary to which the configurations will apply.
            </typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryConfigSettings`2.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/>  to construct expected source Dictionary keys, 
            and to separate member names when mapping to nested complex type members of any target type - 
            the default is '.'. For example, calling UseMemberNameSeparator("_") will require a source 
            Dictionary entry with the key 'Address_Line1' to map to an Address.Line1 member.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing expected source Dictionary 
            keys for nested members.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryConfigSettings`2"/> with which to configure 
            other aspects of source Dictionary mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryConfigSettings`2.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of an expected source Dictionary 
            key representing an enumerable element - the default is '[i]'. The pattern must contain a 
            single 'i' character as a placeholder for the enumerable index. For example, calling 
            UseElementKeyPattern("(i)") and mapping from a Dictionary to a collection of ints will generate 
            searches for keys '(0)', '(1)', '(2)', etc.
            </summary>
            <param name="pattern">
            The pattern to use to create an expected source Dictionary key part representing an enumerable 
            element.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryConfigSettings`2"/> with which to configure 
            other aspects of source Dictionary mapping.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryConfigSettings`2.And">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryMappingConfigurator`2"/>, 
            for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryMappingConfigContinuation`2">
            <summary>
            Enables chaining of configurations for the same dictionary and target type.
            </summary>
            <typeparam name="TValue">
            The type of values stored in the dictionary to which the configurations will apply.
            </typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryMappingConfigContinuation`2.And">
            <summary>
            Perform another configuration of how this mapper maps to and from the dictionary and target types
            being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryMappingConfigurator`2">
            <summary>
            Provides options for configuring mappings from a Dictionary{string, <typeparamref name="TValue"/>} 
            to a given <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TValue">
            The type of values stored in the dictionary to which the configurations will apply.
            </typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryMappingConfigurator`2.MapFullKey(System.String)">
            <summary>
            Configure a custom full dictionary key for a particular target member when mapping from and to the dictionary 
            and target types being configured.
            </summary>
            <param name="fullMemberNameKey">
            The dictionary key with which to retrieve the value to map to the configured target member.
            </param>
            <returns>
            A CustomDictionaryMappingTargetMemberSpecifier with which to specify the target member for which the custom 
            key should be used.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryMappingConfigurator`2.MapMemberNameKey(System.String)">
            <summary>
            Configure a custom member name to use in a key for a particular target member when mapping from and 
            to the dictionary and target types being configured. For example, to map the key "Address.HouseName"
            to a 'Line1' member of an 'Address' member, use MapMemberNameKey("HouseName").To(a => a.Line1).
            </summary>
            <param name="memberNameKeyPart">
            The custom member name to use in a key with which to retrieve the value to map to the configured target member.
            </param>
            <returns>
            A CustomDictionaryMappingTargetMemberSpecifier with which to specify the target member for which the custom 
            member name should be used.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1">
            <summary>
            Provides options for configuring how this mapper will perform mappings from Dictionaries.
            </summary>
            <typeparam name="TValue">
            The type of values stored in the dictionary to which the configurations will apply.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1.UseFlattenedTargetMemberNames">
            <summary>
            Construct keys for target Dictionary members using flattened member names. For example, a
            Person.Address.StreetName member would be mapped to a Dictionary entry with the key 
            'AddressStreetName'.
            </summary>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1"/> with which to configure other aspects 
            of source Dictionary mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/>  to construct expected source Dictionary keys, 
            and to separate member names when mapping to nested complex type members of any target type - 
            the default is '.'. For example, calling UseMemberNameSeparator("_") will require a source 
            Dictionary entry with the key 'Address_Line1' to map to an Address.Line1 member.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing expected source Dictionary 
            keys for nested members.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1"/> with which to configure other aspects 
            of source Dictionary mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of an expected source Dictionary 
            key representing an enumerable element - the default is '[i]'. The pattern must contain a 
            single 'i' character as a placeholder for the enumerable index. For example, calling 
            UseElementKeyPattern("(i)") and mapping from a Dictionary to a collection of ints will generate 
            searches for keys '(0)', '(1)', '(2)', etc.
            </summary>
            <param name="pattern">
            The pattern to use to create an expected source Dictionary key part representing an enumerable 
            element.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1"/> with which to configure other aspects 
            of source Dictionary mapping.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionarySettings`1.AndWhenMapping">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryTargetTypeSelector`1"/>, 
            for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryTargetTypeSelector`1">
            <summary>
            Provides options for specifying the type of Dictionary mapping to perform.
            </summary>
            <typeparam name="TValue">
            The type of values stored in the Dictionary to which the configurations will apply.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryTargetTypeSelector`1.To``1">
            <summary>
            Configure how this mapper performs mappings from Dictionaries in all MappingRuleSets 
            (create new, overwrite, etc), to the target type specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDictionaryMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryTargetTypeSelector`1.ToANew``1">
            <summary>
            Configure how this mapper performs object creation mappings from Dictionaries to the target type 
            specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDictionaryMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryTargetTypeSelector`1.OnTo``1">
            <summary>
            Configure how this mapper performs OnTo (merge) mappings from Dictionaries to the target type 
            specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDictionaryMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ISourceDictionaryTargetTypeSelector`1.Over``1">
            <summary>
            Configure how this mapper performs Over (overwrite) mappings from Dictionaries to the target type 
            specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDictionaryMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryConfigSettings`2">
            <summary>
            Provides options for configuring how mappers will perform mappings to Dictionaries.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TValue">
            The type of values stored in the Dictionary to which the configurations will apply.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryConfigSettings`2.UseFlattenedMemberNames">
            <summary>
            Construct Dictionary keys for nested members using flattened member names - the default is to 
            separate member names with '.'. For example, a Person.Address.StreetName member would be mapped to 
            a Dictionary entry with key 'AddressStreetName' when mapping from a root Person object.
            </summary>
            <returns>
            An ITargetDictionaryConfigSettings to enable further configuration of mappings from the source type
            being configured to Dictionaries.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryConfigSettings`2.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/> to separate member names when mapping from nested complex 
            type members to Dictionaries - the default is '.'. For example, calling UseMemberNameSeparator("_") 
            will create a Dictionary entry with the key 'Address_Line1' when mapping from an Address.Line1 member.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing Dictionary keys for nested members.
            </param>
            <returns>
            An ITargetDictionaryConfigSettings to enable further configuration of mappings from the source type
            being configured to Dictionaries.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryConfigSettings`2.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of a Dictionary key representing an 
            enumerable element - the default is '[i]. The pattern must contain a single 'i' character as a 
            placeholder for the enumerable index. For example, calling UseElementKeyPattern("(i)") and mapping 
            from a collection of ints to a Dictionary will generate keys '(0)', '(1)', '(2)', etc.
            </summary>
            <param name="pattern">
            The pattern to use to create a Dictionary key part representing an enumerable element.
            </param>
            <returns>
            An ITargetDictionaryConfigSettings to enable further configuration of mappings from the source 
            type being configured to Dictionaries.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryConfigSettings`2.And">
            <summary>
            Gets a link back to the full ITargetDictionaryMappingConfigurator, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryMappingConfigContinuation`2">
            <summary>
            Enables chaining of configurations for the same source and target dictionary type.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TValue">
            The type of values stored in the dictionary to which the configurations will apply.
            </typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryMappingConfigContinuation`2.And">
            <summary>
            Perform another configuration of how this mapper maps to and from the source and target dictionary 
            types being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryMappingConfigurator`2">
            <summary>
            Provides options for configuring mappings from a <typeparamref name="TSource"/> to a 
            Dictionary{string, <typeparamref name="TValue"/>}.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TValue">
            The type of values stored in the Dictionary to which the configurations will apply.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryMappingConfigurator`2.MapMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Map the given <typeparamref name="TSource"/> member using a custom Dictionary key.
            </summary>
            <typeparam name="TSourceMember">The source member's type.</typeparam>
            <param name="sourceMember">The source member to which to apply the configuration.</param>
            <returns>
            A ICustomTargetDictionaryKeySpecifier with which to specify the custom key to use when mapping 
            the given <paramref name="sourceMember"/>.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dictionaries.ITargetDictionaryMappingInlineConfigurator`2">
            <summary>
            Provides options for configuring mappings from a <typeparamref name="TSource"/> to a 
            Dictionary{string, <typeparamref name="TValue"/>}, inline.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TValue">
            The type of values stored in the Dictionary to which the configurations will apply.
            </typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ICustomDynamicMappingTargetMemberSpecifier`1">
            <summary>
            Provides options for specifying a target member to which an ExpandoObject configuration should apply.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ICustomDynamicMappingTargetMemberSpecifier`1.To``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Apply the configuration to the given <paramref name="targetMember"/>.
            </summary>
            <typeparam name="TTargetValue">The target member's type.</typeparam>
            <param name="targetMember">The target member to which to apply the configuration.</param>
            <returns>
            An ISourceDynamicMappingConfigContinuation to enable further configuration of mappings from 
            Dynamics to the target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ICustomTargetDynamicMemberNameSpecifier`1">
            <summary>
            Provides options for specifying custom target ExpandoObject member names to which configured
            source members should be mapped.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ICustomTargetDynamicMemberNameSpecifier`1.ToFullMemberName(System.String)">
            <summary>
            Configure a custom full ExpandoObject member name to use in place of the configured source 
            member's name when constructing a target ExpandoObject member name. For example, calling 
            Map(address => address.Line1).ToFullMemberName("StreetName") will generate the key 'StreetName'
            when mapping an Address.Line1 property to an ExpandoObject, instead of the default 'Address_Line1'.
            </summary>
            <param name="fullMemberName">
            The member name to which to map the value of the configured source member.
            </param>
            <returns>
            An ITargetDynamicMappingConfigContinuation to enable further configuration of mappings between the 
            source and target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ICustomTargetDynamicMemberNameSpecifier`1.ToMemberName(System.String)">
            <summary>
            Use the given <paramref name="memberName"/> in place of the configured source member's name
            when constructing a target ExpandoObject member name. For example, calling 
            Map(address => address.Line1).ToMemberName("StreetName") will generate the member name 
            'Address_StreetName' when mapping an Address.Line1 property to an ExpandoObject, instead of 
            the default 'Address_Line1'.
            </summary>
            <param name="memberName">
            The member name to use in place of the configured source member's name.
            </param>
            <returns>
            An ITargetDynamicMappingConfigContinuation to enable further configuration of mappings between the 
            source and target types being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings">
            <summary>
            Provides options for configuring how this mapper will perform mappings from source ExpandoObjects.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings.UseFlattenedTargetMemberNames">
            <summary>
            Construct flattened member names for source and target Dynamic members. For example, 
            an ExpandoObject.Address.StreetName member would be mapped to a Dynamic member with the 
            name 'AddressStreetName'.
            </summary>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings"/> with which to configure other global aspects of 
            ExpandoObject mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/>  to construct source and target ExpandoObject 
            member names, and to separate member names when mapping to target ExpandoObject nested 
            complex type members - the default is '_'. For example, calling UseMemberNameSeparator("-") 
            will require a source ExpandoObject member with the name 'Address-Line1' to map to an 
            Address.Line1 member. Any string can be specified as a separator - even if it would create 
            illegal member names like 'Address-Line1' - because ExpandoObjects are mapped as 
            IDictionary{string, Object}s.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing expected source Dynamic 
            member names for nested members.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings"/> with which to configure other global aspects of 
            ExpandoObject mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of a sourec or target Dynamic member 
            name representing an enumerable element - the default is '_i'. The pattern must contain a single 
            'i' character as a placeholder for the enumerable index. For example, calling UseElementKeyPattern("-i-") 
            and mapping from a Dynamic to a collection of ints will generate searches for member names '-0-', 
            '-1-', '-2-', etc. Any pattern can be specified as an element key - even if it would create illegal 
            member names like '-0-' - because ExpandoObjects are mapped as IDictionary{string, Object}s. 
            </summary>
            <param name="pattern">
            The pattern to use to create an expected source Dynamic member name part representing an enumerable 
            element.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings"/> with which to configure other global aspects of ExpandoObject 
            mapping.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dynamics.IGlobalDynamicSettings.AndWhenMapping">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint"/>, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicConfigSettings`1">
            <summary>
            Provides options for configuring how mappers will perform mappings from Dynamics to the given 
            <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicConfigSettings`1.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/>  to construct expected source ExpandoObject 
            member names, and to separate member names when mapping to nested complex type members of 
            any target type - the default is '_'. For example, calling UseMemberNameSeparator("-") 
            will require a source ExpandoObject member with the name 'Address-Line1' to map to an 
            Address.Line1 member. Any string can be specified as a separator - even if it would create 
            illegal member names like 'Address-Line1' - because ExpandoObjects are mapped as 
            IDictionary{string, object}s.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing expected source Dynamic 
            member names for nested members.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicConfigSettings`1"/> with which to configure other 
            aspects of source ExpandoObject mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicConfigSettings`1.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of an expected Dynamic member name 
            representing an enumerable element - the default is '_i'. The pattern must contain a single 'i' 
            character as a placeholder for the enumerable index. Any pattern can be specified as an element 
            key - even if it would create illegal member names like '0-OrderItemId' - because ExpandoObjects 
            are mapped as IDictionary{string, Object}s. For example, calling UseElementKeyPattern("-i-") and 
            mapping from a Dynamic to a collection of ints will generate searches for member names '-0-', '-1-', 
            '-2-', etc.
            </summary>
            <param name="pattern">
            The pattern to use to create an expected source Dynamic member name part representing an enumerable 
            element.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicConfigSettings`1"/> with which to configure other 
            aspects of source ExpandoObject mapping.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicConfigSettings`1.And">
            <summary>
            Gets a link back to the full ISourceDynamicMappingConfigurator, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicMappingConfigContinuation`1">
            <summary>
            Enables chaining of configurations for an ExpandoObject to the same target type.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicMappingConfigContinuation`1.And">
            <summary>
            Perform another configuration of how this mapper maps from an ExpandoObject to the target type
            being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicMappingConfigurator`1">
            <summary>
            Provides options for configuring mappings from an ExpandoObject to a given <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicMappingConfigurator`1.MapFullMemberName(System.String)">
            <summary>
            Configure a custom source member for a particular target member when mapping from an ExpandoObject 
            to the target type being configured.
            </summary>
            <param name="sourceMemberName">
            The name of the source member from which to retrieve the value to map to the configured target member.
            </param>
            <returns>
            An ICustomDynamicMappingTargetMemberSpecifier with which to specify the target member for which the 
            member with the given <paramref name="sourceMemberName"/> should be used.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicMappingConfigurator`1.MapMemberName(System.String)">
            <summary>
            Configure a custom member name to use in a key for a particular target member when mapping from an 
            ExpandoObject to the target type being configured. For example, to map the member "Address.HouseName"
            to a 'Line1' member of an 'Address' member, use MapMemberName("HouseName").To(a => a.Line1).
            </summary>
            <param name="memberNamePart">
            The custom member name to use in a key with which to retrieve the value to map to the configured target member.
            </param>
            <returns>
            A CustomDictionaryMappingTargetMemberSpecifier with which to specify the target member for which the custom 
            member name should be used.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings">
            <summary>
            Provides options for configuring how this mapper will perform mappings from source ExpandoObjects.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings.UseFlattenedTargetMemberNames">
            <summary>
            Construct flattened member names for target Dynamic members. For example, an
            ExpandoObject.Address.StreetName member would be mapped to a Dynamic member with the 
            name 'AddressStreetName'.
            </summary>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings"/> with which to configure other aspects of source 
            ExpandoObject mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/>  to construct expected source ExpandoObject 
            member names, and to separate member names when mapping to nested complex type members of 
            any target type - the default is '_'. For example, calling UseMemberNameSeparator("-") 
            will require a source ExpandoObject member with the name 'Address-Line1' to map to an 
            Address.Line1 member. Any string can be specified as a separator - even if it would create 
            illegal member names like 'Address-Line1' - because ExpandoObjects are mapped as 
            IDictionary{string, object}s.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing expected source Dynamic 
            member names for nested members.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings"/> with which to configure other aspects of source 
            ExpandoObject mapping.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of an expected Dynamic member name 
            representing an enumerable element - the default is '_i'. The pattern must contain a single 'i' 
            character as a placeholder for the enumerable index. For example, calling UseElementKeyPattern("-i-") 
            and mapping from a Dynamic to a collection of ints will generate searches for member names '-0-', '-1-', 
            '-2-', etc. Any pattern can be specified as an element key - even if it would create illegal member 
            names like '-0-' - because ExpandoObjects are mapped as IDictionary{string, Object}s. 
            </summary>
            <param name="pattern">
            The pattern to use to create an expected source Dynamic member name part representing an enumerable 
            element.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings"/> with which to configure other aspects of source ExpandoObject 
            mapping.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicSettings.AndWhenMapping">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicTargetTypeSelector"/>, 
            for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicTargetTypeSelector">
            <summary>
            Provides options for specifying the type of ExpandoObject mapping to perform.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicTargetTypeSelector.To``1">
            <summary>
            Configure how this mapper performs mappings from ExpandoObjects in all MappingRuleSets 
            (create new, overwrite, etc), to the target type specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDynamicMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicTargetTypeSelector.ToANew``1">
            <summary>
            Configure how this mapper performs object creation mappings from ExpandoObjects to the target type 
            specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDynamicMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicTargetTypeSelector.OnTo``1">
            <summary>
            Configure how this mapper performs OnTo (merge) mappings from ExpandoObjects to the target 
            type specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDynamicMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ISourceDynamicTargetTypeSelector.Over``1">
            <summary>
            Configure how this mapper performs Over (overwrite) mappings from ExpandoObjects to the target 
            type specified by the type argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An ISourceDynamicMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicConfigSettings`1">
            <summary>
            Provides options for configuring how mappers will perform mappings to dictionaries.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicConfigSettings`1.UseFlattenedMemberNames">
            <summary>
            Construct ExpandoObject member names for nested members using flattened member names - the default is 
            to separate member names with '_'. For example, a Person.Address.StreetName member would be mapped to 
            an ExpandoObject member with name 'AddressStreetName' when mapping from a root Person object.
            </summary>
            <returns>
            An ITargetDynamicConfigSettings to enable further configuration of mappings from the source type
            being configured to ExpandoObjects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicConfigSettings`1.UseMemberNameSeparator(System.String)">
            <summary>
            Use the given <paramref name="separator"/> to separate member names when mapping from nested complex 
            type members to ExpandoObjects - the default is '_'. For example, calling UseMemberNameSeparator("-") 
            will create an ExpandoObject member with the name 'Address-Line1' when mapping from an Address.Line1 
            member. Any string can be specified as a separator - even if it would create illegal member names like 
            'Address-Line1' - because ExpandoObjects are mapped as IDictionary{string, object}s.
            </summary>
            <param name="separator">
            The separator to use to separate member names when constructing ExpandoObject member names for nested 
            members.
            </param>
            <returns>
            An ITargetDynamicConfigSettings to enable further configuration of mappings from the source type
            being configured to ExpandoObjects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicConfigSettings`1.UseElementKeyPattern(System.String)">
            <summary>
            Use the given <paramref name="pattern"/> to create the part of an ExpandoObject member name 
            representing an enumerable element - the default is '_i. The pattern must contain a single 'i' 
            character as a placeholder for the enumerable index. For example, calling UseElementKeyPattern("(i)") 
            and mapping from a collection of ints to a Dictionary will generate keys '(0)', '(1)', '(2)', 
            etc. Any pattern can be specified as an element key - even if it would create illegal member names 
            like '(0)' - because ExpandoObjects are mapped as IDictionary{string, Object}s.
            </summary>
            <param name="pattern">
            The pattern to use to create a Dictionary key part representing an enumerable element.
            </param>
            <returns>
            An ITargetDynamicConfigSettings to enable further configuration of mappings from the source type
            being configured to ExpandoObjects.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicConfigSettings`1.And">
            <summary>
            Gets a link back to the full ITargetDictionaryMappingConfigurator, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicMappingConfigContinuation`1">
            <summary>
            Enables chaining of configurations for the same source and target type.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicMappingConfigContinuation`1.And">
            <summary>
            Perform another configuration of how this mapper maps to and from the source and target types 
            being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicMappingConfigurator`1">
            <summary>
            Provides options for configuring mappings from a <typeparamref name="TSource"/> to an ExpandoObject.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicMappingConfigurator`1.MapMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Map the given <typeparamref name="TSource"/> member using a custom ExpandoObject member name.
            </summary>
            <typeparam name="TSourceMember">The source member's type.</typeparam>
            <param name="sourceMember">The source member to which to apply the configuration.</param>
            <returns>
            A CustomTargetDictionaryKeySpecifier with which to specify the custom key to use when mapping 
            the given <paramref name="sourceMember"/>.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Dynamics.ITargetDynamicMappingInlineConfigurator`1">
            <summary>
            Provides options for configuring mappings from a <typeparamref name="TSource"/> to an ExpandoObject, inline.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.ICallbackSpecifier`2">
            <summary>
            Provides options for specifying a callback to execute during mappings from and to the source and 
            target types being configured.
            </summary>
            <typeparam name="TSource">The source type for which the callback should execute.</typeparam>
            <typeparam name="TTarget">The target type for which the callback should execute.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICallbackSpecifier`2.Call(System.Action{AgileObjects.AgileMapper.Members.IMappingData{`0,`1}})">
            <summary>
            Specify a callback to be executed. The condition expression is passed a context object containing 
            the current mapping's source and target objects.
            </summary>
            <param name="callback">The callback to execute.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICallbackSpecifier`2.Call(System.Action{`0,`1})">
            <summary>
            Specify a callback to be executed. The condition expression is passed the current mapping's source 
            and target objects.
            </summary>
            <param name="callback">The callback to execute.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICallbackSpecifier`2.Call(System.Action{`0,`1,System.Nullable{System.Int32}})">
            <summary>
            Specify a callback to be executed. The condition expression is passed the current mapping's source 
            and target objects and the current enumerable index, if applicable.
            </summary>
            <param name="callback">The callback to execute.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IConditionalCallbackSpecifier`2">
            <summary>
            Provides options for configuring a condition which must evaluate to true for a configured callback 
            to execute during mappings from and to the source and target types being configured.
            </summary>
            <typeparam name="TSource">The source type for which the callback should execute.</typeparam>
            <typeparam name="TTarget">The target type for which the callback should execute.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalCallbackSpecifier`2.If(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Members.IMappingData{`0,`1},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the callback to be executed. The condition
            expression is passed a context object containing the current mapping's source and target objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An ICallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalCallbackSpecifier`2.If(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the callback to be executed. The condition
            expression is passed the current mapping's source and target objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An ICallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalCallbackSpecifier`2.If(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Nullable{System.Int32},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the callback to be executed. The condition
            expression is passed the current mapping's source and target objects and the current enumerable 
            index, if applicable.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An ICallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IConditionalMappingConfigurator`2">
            <summary>
            Provides options for configuring a condition which must evaluate to true for the configuration to apply
            to mappings from and to the source and target types being configured.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalMappingConfigurator`2.If(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Members.IMappingData{`0,`1},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed a context object containing the current mapping's source and target objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IConditionalRootMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalMappingConfigurator`2.If(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the current mapping's source and target objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IConditionalRootMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalMappingConfigurator`2.If(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Nullable{System.Int32},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the current mapping's source and target objects and the current enumerable 
            index, if applicable.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IConditionalRootMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IConditionalPostInstanceCreationCallbackSpecifier`3">
            <summary>
            Provides options for configuring the execution of a callback after a particular type of event for mappings
            from and to the source and target types being configured.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
            <typeparam name="TObject">The type of created object to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalPostInstanceCreationCallbackSpecifier`3.If(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.ObjectPopulation.IObjectCreationMappingData{`0,`1,`2},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed a context object containing the current mapping's source, target and created 
            objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IPostInstanceCreationCallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalPostInstanceCreationCallbackSpecifier`3.If(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the current mapping's source and target objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IPostInstanceCreationCallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalPostInstanceCreationCallbackSpecifier`3.If(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the current mapping's source, target and created objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IPostInstanceCreationCallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalPostInstanceCreationCallbackSpecifier`3.If(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Nullable{System.Int32},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the current mapping's source, target and created objects and the current 
            enumerable index, if applicable.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IPostInstanceCreationCallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IConditionalPreInstanceCreationCallbackSpecifier`2">
            <summary>
            Provides options for configuring the execution of a callback before a particular type of event for mappings
            from and to the source and target types being configured.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalPreInstanceCreationCallbackSpecifier`2.If(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Members.IMappingData{`0,`1},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed a context object containing the current mapping's source and target objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IPreInstanceCreationCallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalPreInstanceCreationCallbackSpecifier`2.If(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the current mapping's source and target objects.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IPreInstanceCreationCallbackSpecifier with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalPreInstanceCreationCallbackSpecifier`2.If(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Nullable{System.Int32},System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the current mapping's source and target objects and the current enumerable 
            index, if applicable.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IConditionalRootMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IConditionalRootMappingConfigurator`2">
            <summary>
            Provides options for configuring a mapping based on the preceding condition.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalRootMappingConfigurator`2.MapTo``1">
            <summary>
            Map the source type being configured to the derived target type specified by 
            <typeparamref name="TDerivedTarget"/> if the preceding condition evaluates to true.
            </summary>
            <typeparam name="TDerivedTarget">The derived target type to create.</typeparam>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IConditionalRootMappingConfigurator`2.MapToNull">
            <summary>
            Map the target type being configured to null if the preceding condition evaluates to true.
            </summary>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.ICustomMappingDataSourceTargetMemberSpecifier`2">
            <summary>
            Provides options for specifying a target member to which a configuration option should apply.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICustomMappingDataSourceTargetMemberSpecifier`2.To``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Apply the configuration to the given <paramref name="targetMember"/>.
            </summary>
            <typeparam name="TTargetValue">The target member's type.</typeparam>
            <param name="targetMember">The target member to which to apply the configuration.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source 
            and target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICustomMappingDataSourceTargetMemberSpecifier`2.To``1(System.Linq.Expressions.Expression{System.Func{`1,System.Action{``0}}})">
            <summary>
            Apply the configuration to the given <paramref name="targetSetMethod"/>.
            </summary>
            <typeparam name="TTargetValue">The type of the target set method's argument.</typeparam>
            <param name="targetSetMethod">The target set method to which to apply the configuration.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source 
            and target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICustomMappingDataSourceTargetMemberSpecifier`2.ToCtor``1">
            <summary>
            Apply the configuration to the constructor parameter with the type specified by the type argument.
            </summary>
            <typeparam name="TTargetParam">The target constructor parameter's type.</typeparam>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source 
            and target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICustomMappingDataSourceTargetMemberSpecifier`2.ToCtor(System.String)">
            <summary>
            Apply the configuration to the constructor parameter with the specified <paramref name="parameterName"/>.
            </summary>
            <param name="parameterName">The target constructor parameter's name.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.ICustomMappingDataSourceTargetMemberSpecifier`2.ToTarget">
            <summary>
            Apply the configured source value to the target object being configured.
            </summary>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source 
            and target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingConfigurator`2">
            <summary>
            Provides options for configuring mappings from and to a given source and target type.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IFullMappingConfigurator`2.Before">
            <summary>
            Configure this mapper to perform an action before a different specified action.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IFullMappingConfigurator`2.After">
            <summary>
            Configure this mapper to perform an action after a different specified action.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingConfigurator`2.Map``1">
            <summary>
            Configure a derived target type to which to map instances of the given derived source type.
            </summary>
            <typeparam name="TDerivedSource">
            The derived source type for which to configure a matching derived target type.
            </typeparam>
            <returns>
            A IMappingDerivedPairTargetTypeSpecifier with which to specify the matching derived target type.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2">
            <summary>
            Provides options for configuring mappings from and to a given source and target type, inline.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.WhenMapping">
            <summary>
            Configure how this mapper performs a mapping, inline. Use this property to switch from 
            configuration of the root Types on which the mapping is being performed to configuration 
            of any other Types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.ForDictionaries">
            <summary>
            Configure how this mapper performs a target Dictionary mapping, inline. Use this property 
            to access Dictionary-specific configuration; custom member keys, separators, etc.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.ForDynamics">
            <summary>
            Configure how this mapper performs a target ExpandoObject mapping, inline. Use this property 
            to access ExpandoObject-specific configuration; separators, etc.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.ThrowNowIfMappingPlanIsIncomplete">
            <summary>
            Throw an exception upon execution of this statement if the mapping being configured has any target members 
            which will not be mapped, maps from a source enum to a target enum which does not support all of its values,
            or includes complex types which cannot be constructed. Use calls to this method to validate a mapping plan; 
            remove them in production code.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.LookForDerivedTypesIn(System.Reflection.Assembly[])">
            <summary>
            Scan the given <paramref name="assemblies"/> when looking for types derived from any source or 
            target type being mapped.
            </summary>
            <param name="assemblies">The assemblies in which to look for derived types.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2"/> with which to configure further 
            settings for the source and target types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.UseNamePrefix(System.String)">
            <summary>
            Expect members of the source and target types being mapped to potentially have the given name 
            <paramref name="prefix"/>. Source and target members will be matched as if the prefix is absent.
            </summary>
            <param name="prefix">The prefix to ignore when matching source and target members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2"/> with which to configure further 
            settings for the source and target types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.UseNamePrefixes(System.String[])">
            <summary>
            Expect members of the source and target types being mapped to potentially have any of the given name 
            <paramref name="prefixes"/>. Source and target members will be matched as if the prefixes are absent.
            </summary>
            <param name="prefixes">The prefixes to ignore when matching source and target members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2"/> with which to configure further 
            settings for the source and target types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.UseNameSuffix(System.String)">
            <summary>
            Expect members of the source and target types being mapped to potentially have the given name 
            <paramref name="suffix"/>. Source and target members will be matched as if the suffix is absent.
            </summary>
            <param name="suffix">The suffix to ignore when matching source and target members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2"/> with which to configure further 
            settings for the source and target types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.UseNameSuffixes(System.String[])">
            <summary>
            Expect members of the source and target types being mapped to potentially have any of the given name 
            <paramref name="suffixes"/>. Source and target members will be matched as if the suffixes are absent.
            </summary>
            <param name="suffixes">The suffixes to ignore when matching source and target members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2"/> with which to configure further 
            settings for the source and target types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.UseNamePattern(System.String)">
            <summary>
            Expect members of the source and target types being mapped to potentially match the given name 
            <paramref name="pattern"/>. The pattern will be used to find the part of a name which should be used to match a 
            source and target member.
            </summary>
            <param name="pattern">
            The Regex pattern to check against source and target member names. The pattern is expected to start with the 
            ^ character, end with the $ character and contain a single capturing group wrapped in parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2"/> with which to configure further 
            settings for the source and target types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2.UseNamePatterns(System.String[])">
            <summary>
            Expect members of the source and target types being mapped to potentially match the given name 
            <paramref name="patterns"/>. The patterns will be used to find the part of a name which should be used to match a 
            source and target member.
            </summary>
            <param name="patterns">
            The Regex patterns to check against source and target member names. Each pattern is expected to start with the 
            ^ character, end with the $ character and contain a single capturing group wrapped in parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator`2"/> with which to configure further 
            settings for the source and target types being mapped.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2">
            <summary>
            Provides options for configuring settings for mappings from and to a given source and target type.
            </summary>
            <typeparam name="TSource">The source type to which the configured settings should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configured settings should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.SwallowAllExceptions">
            <summary>
            Swallow exceptions thrown during a mapping from and to the source and target types being configured. 
            Object mappings which encounter an Exception will return null.
            </summary>
            <returns>
            An IFullMappingSettings{TSource, TTarget} with which to configure further settings for the source and
            target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.PassExceptionsTo(System.Action{AgileObjects.AgileMapper.Members.IMappingExceptionData{`0,`1}})">
            <summary>
            Pass Exceptions thrown during a mapping from and to the source and target types being configured to 
            the given <paramref name="callback"/> instead of throwing them.
            </summary>
            <param name="callback">
            The callback to which to pass thrown Exception information. If the thrown exception should not be 
            swallowed, it should be rethrown inside the callback.
            </param>
            <returns>
            An IFullMappingSettings{TSource, TTarget} with which to configure further settings for the source and
            target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.MaintainIdentityIntegrity">
            <summary>
            Ensure 1-to-1 relationships between source and mapped objects during a mapping from and to the source and 
            target types being configured, by tracking and reusing mapped objects if they appear more than once in a 
            source object tree. Mapped objects are automatically tracked in object trees with circular relationships - 
            unless <see cref="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.DisableObjectTracking"/> is called - so configuring this option is not necessary just to 
            map circular relationships.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2"/> with which to configure further settings for the source 
            and target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.DisableObjectTracking">
            <summary>
            Disable tracking of objects during circular relationship mapping from and to the source and target types 
            being configured. Mapped objects are tracked by default when mapping circular relationships to prevent stack 
            overflows if two objects in a source object tree hold references to each other, and to ensure 1-to-1 relationships 
            between source and mapped objects. If you are confident that each object in a source object tree appears 
            only once, disabling object tracking will increase mapping performance.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2"/> with which to configure further settings for the source 
            and target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.MapNullCollectionsToNull">
            <summary>
            Map null source collections to null instead of an empty collection, for the source and target types 
            being configured.
            </summary>
            <returns>
            An IFullMappingSettings{TSource, TTarget} with which to configure further settings for the source and
            target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.PairEnum``1(``0)">
            <summary>
            Configure this mapper to pair the given <paramref name="enumMember"/> with a member of another 
            enum Type.
            </summary>
            <typeparam name="TPairingEnum">The type of the enum member to pair.</typeparam>
            <param name="enumMember">The first enum member in the pair.</param>
            <returns>
            An IMappingEnumPairSpecifier with which to specify the enum member to which the given 
            <paramref name="enumMember"/> should be paired.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IFullMappingSettings`2.And">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IFullMappingConfigurator`2"/>, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings">
            <summary>
            Provides options for globally configuring how all mappers will perform mappings.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.SwallowAllExceptions">
            <summary>
            Swallow exceptions thrown during a mapping, for all source and target types. Object mappings which 
            encounter an Exception will return null.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.PassExceptionsTo(System.Action{AgileObjects.AgileMapper.Members.IMappingExceptionData})">
            <summary>
            Pass Exceptions thrown during a mapping to the given <paramref name="callback"/> instead of throwing 
            them, for all source and target types.
            </summary>
            <param name="callback">
            The callback to which to pass thrown Exception information. If the thrown exception should not be 
            swallowed, it should be rethrown inside the callback.
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.UseNamePrefix(System.String)">
            <summary>
            Expect members of all source and target types to potentially have the given name <paramref name="prefix"/>.
            Source and target members will be matched as if the prefix is absent.
            </summary>
            <param name="prefix">The prefix to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.UseNamePrefixes(System.String[])">
            <summary>
            Expect members of all source and target types to potentially have any of the given name <paramref name="prefixes"/>.
            Source and target members will be matched as if the prefixes are absent.
            </summary>
            <param name="prefixes">The prefixes to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.UseNameSuffix(System.String)">
            <summary>
            Expect members of all source and target types to potentially have the given name <paramref name="suffix"/>.
            Source and target members will be matched as if the suffix is absent.
            </summary>
            <param name="suffix">The suffix to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.UseNameSuffixes(System.String[])">
            <summary>
            Expect members of all source and target types to potentially have any of the given name <paramref name="suffixes"/>.
            Source and target members will be matched as if the suffixes are absent.
            </summary>
            <param name="suffixes">The suffixes to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.UseNamePattern(System.String)">
            <summary>
            Expect members of all source and target types to potentially match the given name <paramref name="pattern"/>.
            The pattern will be used to find the part of a name which should be used to match a source and target member.
            </summary>
            <param name="pattern">
            The Regex pattern to check against source and target member names. The pattern is expected to start with the 
            ^ character, end with the $ character and contain a single capturing group wrapped in parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.UseNamePatterns(System.String[])">
            <summary>
            Expect members of all source and target types to potentially match the given name <paramref name="patterns"/>.
            The patterns will be used to find the part of a name which should be used to match a source and target member.
            </summary>
            <param name="patterns">
            The Regex patterns to check against source and target member names. Each pattern is expected to start with the 
            ^ character, end with the $ character and contain a single capturing group wrapped in parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.MaintainIdentityIntegrity">
            <summary>
            Ensure 1-to-1 relationships between source and mapped objects by tracking and reusing mapped objects if 
            they appear more than once in a source object tree. Mapped objects are automatically tracked in object 
            trees with circular relationships - unless <see cref="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.DisableObjectTracking"/> is called - so configuring 
            this option is not necessary just to map circular relationships.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.DisableObjectTracking">
            <summary>
            Disable tracking of objects during circular relationship mapping between all source and target types. 
            Mapped objects are tracked by default when mapping circular relationships to prevent stack overflows 
            if two objects in a source object tree hold references to each other, and to ensure 1-to-1 relationships 
            between source and mapped objects. If you are confident that each object in a source object tree appears 
            only once, disabling object tracking will increase mapping performance.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.MapNullCollectionsToNull">
            <summary>
            Map null source collections to null instead of an empty collection, for all source and target types.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.UseConfigurations">
            <summary>
            Setup Mapper configuration via <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> instances.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings.AndWhenMapping">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint"/>, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IMappingConfigContinuation`2">
            <summary>
            Enables chaining of configurations for the same source and target type.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IMappingConfigContinuation`2.And">
            <summary>
            Perform another configuration of how this mapper maps to and from the source and target types
            being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.IMappingConfigContinuation`2.But">
            <summary>
            Perform an alternative configuration of how this mapper maps to and from the source and target types
            being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IMappingDerivedPairTargetTypeSpecifier`2">
            <summary>
            Enables the selection of a derived target type to which to match a configured source type.
            </summary>
            <typeparam name="TSource">
            The type of source object for which the derived type pair is being configured.
            </typeparam>
            <typeparam name="TTarget">
            The type of target object for which the derived type pair is being configured.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IMappingDerivedPairTargetTypeSpecifier`2.To``1">
            <summary>
            Map the derived source type being configured to the derived target type specified by the type argument.
            </summary>
            <typeparam name="TDerivedTarget">
            The derived target type to create for the configured derived source type.
            </typeparam>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IMappingEnumPairSpecifier`2">
            <summary>
            Provides options for specifying the enum member(s) with which the previously-specified enum member(s) 
            should be paired.
            </summary>
            <typeparam name="TSource">The source type being configured.</typeparam>
            <typeparam name="TTarget">The target type being configured.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IMappingEnumPairSpecifier`2.With``1(``0[])">
            <summary>
            Configure this mapper to map the previously-specified enum member(s) to the given 
            <paramref name="pairedEnumMembers"/>.
            </summary>
            <typeparam name="TPairedEnum">The type of enum the members of which are being paired.</typeparam>
            <param name="pairedEnumMembers">
            One or more enum members to pair to the previously-specified enum members.
            </param>
            <returns>An IMappingConfigContinuation with which to configure other aspects of mapping.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IMappingFactorySpecifier`3">
            <summary>
            Provides options for configuring custom factory objects with which to create instances of the 
            <typeparamref name="TObject"/> Type, when mapping from and to the given source and target types.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
            <typeparam name="TObject">The type of object which will be created by the configured factories.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IMappingFactorySpecifier`3.Using(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Members.IMappingData{`0,`1},`2}})">
            <summary>
            Use the given <paramref name="factory"/> expression to create instances of the object type being 
            configured. The factory expression is passed a context object containing the current mapping's source 
            and target objects.
            </summary>
            <param name="factory">
            The factory expression to use to create instances of the type being configured.
            </param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source 
            and target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IMappingFactorySpecifier`3.Using``1(``0)">
            <summary>
            Use the given <paramref name="factory"/> function to create instances of the object type being 
            configured. The following factory function signatures are supported:
            <para>
            Func&lt;TObject&gt; - parameterless.
            </para>
            <para>
            Func&lt;IMappingData&lt;TSource, TTarget&gt;, TObject&gt; - taking a context object containing the 
            current mapping's source and target objects.
            </para>
            <para>
            Func&lt;TSource, TTarget, TObject&gt; - taking the source and target objects.
            </para>
            <para>
            Func&lt;TSource, TTarget, int?, TObject&gt; - taking the source and target objects and the current 
            enumerable index, if applicable.
            </para>
            </summary>
            <param name="factory">
            The factory function to use to create instances of the type being configured.
            </param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source 
            and target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.InstanceConfigurator`1">
            <summary>
            Provides options for configuring mappings of the type specified by the type argument.
            </summary>
            <typeparam name="TObject">The type of object to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.InstanceConfigurator`1.IdentifyUsing``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Use the given <paramref name="idExpression"/> to uniquely identify instances of the type being configured.
            </summary>
            <typeparam name="TId">
            The type of the expression to use to uniquely identify instances of the type being configured.
            </typeparam>
            <param name="idExpression">
            The expression to use to uniquely identify instances of the type being configured.
            </param>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.InstanceConfigurator`1.CreateUsing(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Members.IMappingData{System.Object,System.Object},`0}})">
            <summary>
            Use the given <paramref name="factory"/> expression to create instances of the type being configured.
            The factory expression is passed a context object containing the current mapping's source and target 
            objects in untyped properties.
            </summary>
            <param name="factory">
            The factory expression to use to create instances of the type being configured.
            </param>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.InstanceConfigurator`1.CreateUsing``1(``0)">
            <summary>
            Use the given <paramref name="factory"/> function to create instances of the type being configured.
            The following factory function signatures are supported:
            <para>
            Func&lt;TObject&gt; - parameterless.
            </para>
            <para>
            Func&lt;IMappingData&lt;object, object&gt;, TObject&gt; - taking a context object containing the 
            current mapping's source and target objects in untyped properties.
            </para>
            <para>
            Func&lt;object, object, TObject&gt; - taking the source and target objects as untyped arguments.
            </para>
            <para>
            Func&lt;object, object, int?, TObject&gt; - taking the source and target objects as untyped 
            arguments and the current enumerable index, if applicable.
            </para>
            </summary>
            <param name="factory">
            The factory function to use to create instances of the type being configured.
            </param>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IPostInstanceCreationCallbackSpecifier`3">
            <summary>
            Provides options for specifying a callback to be called after a particular type of event for mappings
            from and to the source and target types being configured.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
            <typeparam name="TObject">The type of created object to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IPostInstanceCreationCallbackSpecifier`3.Call(System.Action{AgileObjects.AgileMapper.ObjectPopulation.IObjectCreationMappingData{`0,`1,`2}})">
            <summary>
            Configure a callback to call in the configured conditions. The callback is passed a context 
            object containing the current mapping's source, target and created objects.
            </summary>
            <param name="callback">The callback to call.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IPostInstanceCreationCallbackSpecifier`3.Call(System.Action{`0,`1})">
            <summary>
            Configure a callback to call in the configured conditions. The callback is passed the current 
            mapping's source and target objects.
            </summary>
            <param name="callback">The callback to call.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IPostInstanceCreationCallbackSpecifier`3.Call(System.Action{`0,`1,`2})">
            <summary>
            Configure a callback to call in the configured conditions. The callback is passed the current 
            mapping's source and target objects and the current enumerable index, if applicable.
            </summary>
            <param name="callback">The callback to call.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IPostInstanceCreationCallbackSpecifier`3.Call(System.Action{`0,`1,`2,System.Nullable{System.Int32}})">
            <summary>
            Configure a callback to call in the configured conditions. The callback is passed the current 
            mapping's source, target and created objects and the current enumerable index, if applicable.
            </summary>
            <param name="callback">The callback to call.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IPreInstanceCreationCallbackSpecifier`2">
            <summary>
            Provides options for specifying a callback to be called before a particular type of event for mappings
            from and to the source and target types being configured.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IPreInstanceCreationCallbackSpecifier`2.Call(System.Action{AgileObjects.AgileMapper.Members.IMappingData{`0,`1}})">
            <summary>
            Configure a callback to call in the configured conditions. The callback is passed a context 
            object containing the current mapping's source and target objects.
            </summary>
            <param name="callback">The callback to call.</param>
            <returns>
            A MappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
            <returns></returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IPreInstanceCreationCallbackSpecifier`2.Call(System.Action{`0,`1})">
            <summary>
            Configure a callback to call in the configured conditions. The callback is passed the current 
            mapping's source and target objects.
            </summary>
            <param name="callback">The callback to call.</param>
            <returns>
            A MappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IPreInstanceCreationCallbackSpecifier`2.Call(System.Action{`0,`1,System.Nullable{System.Int32}})">
            <summary>
            Configure a callback to call in the configured conditions. The callback is passed the current 
            mapping's source and target objects and the current enumerable index, if applicable.
            </summary>
            <param name="callback">The callback to call.</param>
            <returns>
            A MappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2">
            <summary>
            Provides options for configuring mappings from and to a given source and target type.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.CreateInstancesUsing(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Members.IMappingData{`0,`1},`1}})">
            <summary>
            Use the given <paramref name="factory"/> expression to create instances of the target type being 
            configured. The factory expression is passed a context object containing the current mapping's source
            and target objects.
            </summary>
            <param name="factory">
            The factory expression to use to create instances of the type being configured.
            </param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.CreateInstancesUsing``1(``0)">
            <summary>
            Use the given <paramref name="factory"/> function to create instances of the target type being 
            configured. The following factory function signatures are supported:
            <para>
            Func&lt;TTarget&gt; - parameterless.
            </para>
            <para>
            Func&lt;IMappingData&lt;TSource, TTarget&gt;, TTarget&gt; - taking a context object containing the 
            current mapping's source and target objects.
            </para>
            <para>
            Func&lt;TSource, TTarget, TTarget&gt; - taking the source and target objects.
            </para>
            <para>
            Func&lt;TSource, TTarget, int?, TTarget&gt; - taking the source and target objects and the current 
            enumerable index, if applicable.
            </para>
            </summary>
            <param name="factory">
            The factory function to use to create instances of the type being configured.
            </param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.CreateInstancesOf``1">
            <summary>
            Configure a factory to use to create instances of the <typeparamref name="TObject"/> Type.
            </summary>
            <typeparam name="TObject">The Type of object the creation of which is to be configured.</typeparam>
            <returns>
            An IMappingFactorySpecifier with which to configure the factory for  the 
            <typeparamref name="TObject"/> Type.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.Ignore(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Ignore the given <paramref name="targetMembers"/> when mappingfrom and to the source and target types 
            being configured.
            </summary>
            <param name="targetMembers">The target member(s) which should be ignored.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.IgnoreTargetMembersOfType``1">
            <summary>
            Ignore all target member(s) of the given <typeparamref name="TMember">Type</typeparamref> when mapping
            from and to the source and target types being configured.
            </summary>
            <typeparam name="TMember">The Type of target member to ignore.</typeparam>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.IgnoreTargetMembersWhere(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Configuration.TargetMemberSelector,System.Boolean}})">
            <summary>
            Ignore all target member(s) matching the given <paramref name="memberFilter"/> when mapping
            from and to the source and target types being configured.
            </summary>
            <param name="memberFilter">The matching function with which to select target members to ignore.</param>
            <returns>
            An IMappingConfigContinuation to enable further configuration of mappings from and to the source and 
            target types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.Map``1(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Members.IMappingData{`0,`1},``0}})">
            <summary>
            Configure a custom data source for a particular target member when mapping from and to the source and 
            target types being configured. The factory expression is passed a context object containing the current 
            mapping's source and target objects.
            </summary>
            <typeparam name="TSourceValue">The type of the custom value being configured.</typeparam>
            <param name="valueFactoryExpression">The expression to map to the configured target member.</param>
            <returns>
            An ICustomMappingDataSourceTargetMemberSpecifier with which to specify the target member to which the 
            custom value should be applied.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.Map``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Configure a custom data source for a particular target member when mapping from and to the source and 
            target types being configured. The factory expression is passed the current mapping's source and target 
            objects.
            </summary>
            <typeparam name="TSourceValue">The type of the custom value being configured.</typeparam>
            <param name="valueFactoryExpression">The expression to map to the configured target member.</param>
            <returns>
            An ICustomMappingDataSourceTargetMemberSpecifier with which to specify the target member to which the 
            custom value should be applied.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.Map``1(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Nullable{System.Int32},``0}})">
            <summary>
            Configure a custom data source for a particular target member when mapping from and to the source and 
            target types being configured. The factory expression is passed the current mapping's source and target 
            objects and the current enumerable index, if applicable.
            </summary>
            <typeparam name="TSourceValue">The type of the custom value being configured.</typeparam>
            <param name="valueFactoryExpression">The expression to map to the configured target member.</param>
            <returns>
            An ICustomMappingDataSourceTargetMemberSpecifier with which to specify the target member to which the 
            custom value should be applied.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.MapFunc``1(System.Func{`0,``0})">
            <summary>
            Configure a Func object to be mapped to a target member of the same Func signature.
            </summary>
            <typeparam name="TSourceValue">The type of value returned by the given Func.</typeparam>
            <param name="valueFunc">The Func object to map to the configured target member.</param>
            <returns>
            An ICustomMappingDataSourceTargetMemberSpecifier with which to specify the target member to which the 
            custom value should be applied.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.IRootMappingConfigurator`2.Map``1(``0)">
            <summary>
            Configure a constant value for a particular target member when mapping from and to the source and 
            target types being configured.
            </summary>
            <typeparam name="TSourceValue">The type of the custom constant value being configured.</typeparam>
            <param name="value">The constant value to map to the configured target member.</param>
            <returns>
            An ICustomMappingDataSourceTargetMemberSpecifier with which to specify the target member to which the 
            custom constant value should be applied.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier">
            <summary>
            Provides options for specifying <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> instances with which to
            perform Mapper configuration.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier.From(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Apply all the <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s defined in the given <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">
            One or more assemblies in which to look for <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier"/>, to enable further <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s
            to be registered.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier.From(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Apply all the <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s defined in the given <paramref name="assemblies"/>
            which match the given <paramref name="filter"/>.
            </summary>
            <param name="assemblies">
            One or more assemblies in which to look for <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s.
            </param>
            <param name="filter">
            A filter which assemblies should match before being checked for <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier"/>, to enable further <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s
            to be registered.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier.From``1">
            <summary>
            Apply the configuration in the <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> of the given
            <typeparamref name="TConfiguration"/> instance.
            </summary>
            <typeparam name="TConfiguration">The <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> implementation to apply.</typeparam>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier"/>, to enable further <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s
            to be registered.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier.FromAssemblyOf``1">
            <summary>
            Apply all the <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s defined in the Assembly in which the given
            <typeparamref name="T">Type</typeparamref> is defined.
            </summary>
            <typeparam name="T">
            The type belonging to the Assembly in which to look for <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s.
            </typeparam>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.Api.Configuration.MapperConfigurationSpecifier"/>, to enable further <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/>s
            to be registered.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint">
            <summary>
            Provides options for configuring how a mapper performs a mapping.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseConfigurations">
            <summary>
            Setup Mapper configuration via <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> instances.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseServiceProvider``1(``0)">
            <summary>
            Use the given <paramref name="serviceProvider"/> instance to create named service instances during
            a mapping. The given object must expose one of the following public, instance methods:
            - GetService(Type type)
            - GetService(Type type, string name)
            - GetInstance(Type type)
            - GetInstance(Type type, string name)
            - Resolve(Type type)
            - Resolve(Type type, string name)
            Overloads with a 'name' parameter can also take one or more optional or params array parameters. If
            no useable methods are found, a <see cref="T:AgileObjects.AgileMapper.Configuration.MappingConfigurationException"/> is thrown.
            </summary>
            <typeparam name="TServiceProvider">The Type of the service provider object to use.</typeparam>
            <param name="serviceProvider">The service provider instance to use.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseServiceProvider(System.Func{System.Type,System.Object})">
            <summary>
            Use the given <paramref name="serviceFactory"/> to create unnamed service instances during
            a mapping.
            </summary>
            <param name="serviceFactory">The service factory to use.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseServiceProvider(System.Func{System.Type,System.String,System.Object})">
            <summary>
            Use the given <paramref name="serviceFactory"/> to create named service instances during
            a mapping.
            </summary>
            <param name="serviceFactory">The service factory to use.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.SwallowAllExceptions">
            <summary>
            Swallow exceptions thrown during a mapping, for all source and target types. Object mappings which 
            encounter an Exception will return null.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.PassExceptionsTo(System.Action{AgileObjects.AgileMapper.Members.IMappingExceptionData})">
            <summary>
            Pass Exceptions thrown during a mapping to the given <paramref name="callback"/> instead of throwing 
            them, for all source and target types.
            </summary>
            <param name="callback">
            The callback to which to pass thrown Exception information. If the thrown exception should not be 
            swallowed, it should be rethrown inside the callback.
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseNamePrefix(System.String)">
            <summary>
            Expect members of all source and target types to potentially have the given name <paramref name="prefix"/>.
            Source and target members will be matched as if the prefix is absent.
            </summary>
            <param name="prefix">The prefix to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseNamePrefixes(System.String[])">
            <summary>
            Expect members of all source and target types to potentially have any of the given name <paramref name="prefixes"/>.
            Source and target members will be matched as if the prefixes are absent.
            </summary>
            <param name="prefixes">The prefixes to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseNameSuffix(System.String)">
            <summary>
            Expect members of all source and target types to potentially have the given name <paramref name="suffix"/>.
            Source and target members will be matched as if the suffix is absent.
            </summary>
            <param name="suffix">The suffix to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseNameSuffixes(System.String[])">
            <summary>
            Expect members of all source and target types to potentially have any of the given name <paramref name="suffixes"/>.
            Source and target members will be matched as if the suffixes are absent.
            </summary>
            <param name="suffixes">The suffixes to ignore when matching source and target members.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseNamePattern(System.String)">
            <summary>
            Expect members of all source and target types to potentially match the given name <paramref name="pattern"/>.
            The pattern will be used to find the part of a name which should be used to match a source and target member.
            </summary>
            <param name="pattern">
            The Regex pattern to check against source and target member names. The pattern is expected to start with the 
            ^ character, end with the $ character and contain a single capturing group wrapped in parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.UseNamePatterns(System.String[])">
            <summary>
            Expect members of all source and target types to potentially match the given name <paramref name="patterns"/>.
            The patterns will be used to find the part of a name which should be used to match a source and target member.
            </summary>
            <param name="patterns">
            The Regex patterns to check against source and target member names. Each pattern is expected to start with the 
            ^ character, end with the $ character and contain a single capturing group wrapped in parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.MaintainIdentityIntegrity">
            <summary>
            Ensure 1-to-1 relationships between source and mapped objects by tracking and reusing mapped objects if 
            they appear more than once in a source object tree. Mapped objects are automatically tracked in object 
            trees with circular relationships - unless <see cref="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.DisableObjectTracking"/> is called - so configuring 
            this option is not necessary when mapping circular relationships.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.DisableObjectTracking">
            <summary>
            Disable tracking of objects during circular relationship mapping between all source and target types. 
            Mapped objects are tracked by default when mapping circular relationships to prevent stack overflows 
            if two objects in a source object tree hold references to each other, and to ensure 1-to-1 relationships 
            between source and mapped objects. If you are confident that each object in a source object tree appears 
            only once, disabling object tracking will increase mapping performance.
            </summary>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.MapNullCollectionsToNull">
            <summary>
            Map null source collections to null instead of an empty collection, for all source and target types.
            </summary>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.ThrowIfAnyMappingPlanIsIncomplete">
            <summary>
            Throw an exception upon creation of a mapper if the mapping plan has any target members which will not be mapped, 
            maps from a source enum to a target enum which does not support all of its values, or includes complex types which 
            cannot be constructed. Call this method to validate mapping plans during development; remove it in production code.
            </summary>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.PairEnum``1(``0)">
            <summary>
            Configure this mapper to pair the given <paramref name="enumMember"/> with a member of another 
            enum Type. This pairing will apply to mappings between all types and MappingRuleSets (create new, 
            overwrite, etc).
            </summary>
            <typeparam name="TPairingEnum">The type of the enum member to pair.</typeparam>
            <param name="enumMember">The enum member to pair.</param>
            <returns>
            An IMappingEnumPairSpecifier with which to specify the enum member to which the given 
            <paramref name="enumMember"/> should be paired.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.PairEnums``1(``0[])">
            <summary>
            Configure this mapper to pair the given <paramref name="enumMembers"/> with members of another 
            enum Type. Pairings will apply to mappings between all types and MappingRuleSets (create new, 
            overwrite, etc).
            </summary>
            <typeparam name="TPairingEnum">The type of the enum members to pair.</typeparam>
            <param name="enumMembers">The enum members to pair.</param>
            <returns>
            An IMappingEnumPairSpecifier with which to specify the set of enum members to which the given 
            <paramref name="enumMembers"/> should be paired.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.LookForDerivedTypesIn(System.Reflection.Assembly[])">
            <summary>
            Scan the given <paramref name="assemblies"/> when looking for types derived from any source or 
            target type being mapped.
            </summary>
            <param name="assemblies">The assemblies in which to look for derived types.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.IgnoreTargetMembersOfType``1">
            <summary>
            Ignore all target member(s) of the given <typeparamref name="TMember">Type</typeparamref>. Members will be
            ignored in mappings between all types and MappingRuleSets (create new, overwrite, etc).
            </summary>
            <typeparam name="TMember">The Type of target member to ignore.</typeparam>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.IgnoreTargetMembersWhere(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Configuration.TargetMemberSelector,System.Boolean}})">
            <summary>
            Ignore all target member(s) matching the given <paramref name="memberFilter"/>. Members will be
            ignored in mappings between all types and MappingRuleSets (create new, overwrite, etc).
            </summary>
            <param name="memberFilter">The matching function with which to select target members to ignore.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.StringsFrom``1(System.Action{AgileObjects.AgileMapper.Configuration.StringFormatSpecifier})">
            <summary>
            Configure a formatting string to use when mapping from the given <typeparamref name="TSourceValue"/>
            to strings, for all source and target types.
            </summary>
            <typeparam name="TSourceValue">The source value type to which to apply a formatting string.</typeparam>
            <param name="formatSelector">An action which supplies the formatting string.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.IGlobalMappingSettings"/> with which to globally configure other mapping aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.InstancesOf``1(``0)">
            <summary>
            Configure how this mapper maps objects of the type specified by the given <paramref name="exampleInstance"/>. 
            Use this overload for anonymous types.
            </summary>
            <typeparam name="TObject">The type of object to which the configuration will apply.</typeparam>
            <param name="exampleInstance">
            An instance specifying the source type for which mapping will be configured.
            </param>
            <returns>An InstanceConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.InstancesOf``1">
            <summary>
            Configure how this mapper maps objects of the type specified by the type argument.
            </summary>
            <typeparam name="TObject">The type of object to which the configuration will apply.</typeparam>
            <returns>An InstanceConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.Dictionaries">
            <summary>
            Configure how this mapper performs mappings from or to source Dictionary instances
            with any Dictionary value type.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.DictionariesWithValueType``1">
            <summary>
            Configure how this mapper performs mappings from or to source Dictionary{string, TValue} instances.
            </summary>
            <typeparam name="TValue">
            The type of values contained in the Dictionary to which the configuration will apply.
            </typeparam>
            <returns>
            An IGlobalDictionarySettings with which to continue other global aspects of Dictionary mapping.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.FromDictionaries">
            <summary>
            Configure how this mapper performs mappings from source Dictionary instances with 
            any Dictionary value type.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.FromDictionariesWithValueType``1">
            <summary>
            Configure how this mapper performs mappings from source Dictionary{string, TValue} instances.
            </summary>
            <typeparam name="TValue">
            The type of values contained in the Dictionary to which the configuration will apply.
            </typeparam>
            <returns>
            An ISourceDictionaryTargetTypeSelector with which to specify to which target type the 
            configuration will apply.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.Dynamics">
            <summary>
            Configure how this mapper performs mappings from or to ExpandoObject instances.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.FromDynamics">
            <summary>
            Configure how this mapper performs mappings from source ExpandoObject instances.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.From``1(``0)">
            <summary>
            Configure how this mapper performs mappings from the source type specified by the given 
            <paramref name="exampleInstance"/>. Use this overload for anonymous types.
            </summary>
            <typeparam name="TSource">The type of the given <paramref name="exampleInstance"/>.</typeparam>
            <param name="exampleInstance">The instance specifying to which source type the configuration will apply.</param>
            <returns>A TargetSpecifier with which to specify to which target type the configuration will apply.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.From``1">
            <summary>
            Configure how this mapper performs mappings from the source type specified by the type argument.
            </summary>
            <typeparam name="TSource">The source type to which the configuration will apply.</typeparam>
            <returns>A TargetSpecifier with which to specify to which target type the configuration will apply.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.To``1">
            <summary>
            Configure how this mapper performs mappings from all source types and MappingRuleSets (create new, 
            overwrite, etc), to the <typeparamref name="TTarget"/> Type.
            </summary>
            <typeparam name="TTarget">The target Type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.ToANew``1">
            <summary>
            Configure how this mapper performs object creation mappings from any source type to the 
            <typeparamref name="TResult"/> Type.
            </summary>
            <typeparam name="TResult">The result Type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.OnTo``1">
            <summary>
            Configure how this mapper performs OnTo (merge) mappings from any source type to the 
            <typeparamref name="TTarget"/> Type.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.Over``1">
            <summary>
            Configure how this mapper performs Over (overwrite) mappings from any source type to the 
            <typeparamref name="TTarget"/> Type.
            </summary>
            <typeparam name="TTarget">The target Type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPoint.ProjectionsTo``1">
            <summary>
            Configure how this mapper performs query projection mappings from any source type to the
            <typeparamref name="TResult"/> Type.
            </summary>
            <typeparam name="TResult">The result Type to which the configuration will apply.</typeparam>
            <returns>An IFullProjectionConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.MappingConfigStartingPointBase`2">
            <summary>
            Provides options for configuring an element of how this mapper performs a mapping.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.PostEventConfigStartingPoint">
            <summary>
            Provides options for configuring the execution of a callback after a particular type of event for all
            source and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PostEventConfigStartingPoint.MappingEnds">
            <summary>
            Configure a callback to be executed after any object mapping ends.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PostEventConfigStartingPoint.CreatingInstances">
            <summary>
            Configure a callback to be executed after instances of any object are created during any object 
            mapping.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.PostEventConfigStartingPoint.CreatingInstancesOf``1">
            <summary>
            Configure a callback to be executed after instances of the given type argument are created during 
            any object mapping.
            </summary>
            <typeparam name="TObject">
            The type of object the creation of which the callback execution should follow.
            </typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.PostEventMappingConfigStartingPoint`2">
            <summary>
            Provides options for configuring the execution of a callback after a particular type of event for a 
            particular source and target type.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PostEventMappingConfigStartingPoint`2.MappingEnds">
            <summary>
            Configure a callback to be executed after a mapping from and to the source and target types being 
            configured ends.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.PostEventMappingConfigStartingPoint`2.Mapping``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Configure a callback to be executed after the given <paramref name="targetMember"/> is populated
            during a mapping from and to the source and target types being configured.
            </summary>
            <param name="targetMember">
            The member of the target type being configured the population of which the callback execution should 
            follow.
            </param>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PostEventMappingConfigStartingPoint`2.CreatingInstances">
            <summary>
            Configure a callback to be executed after instances of any object are created during a mapping 
            from and to the source and target types being configured.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PostEventMappingConfigStartingPoint`2.CreatingTargetInstances">
            <summary>
            Configure a callback to be executed after instances of the target type being configured are created 
            during a mapping from the source type being configured.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.PostEventMappingConfigStartingPoint`2.CreatingInstancesOf``1">
            <summary>
            Configure a callback to be executed after instances of the given type argument are created during a 
            mapping from and to the source and target types being configured.
            </summary>
            <typeparam name="TObject">
            The type of object the creation of which the callback execution should follow.
            </typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.PreEventConfigStartingPoint">
            <summary>
            Provides options for configuring the execution of a callback before a particular type of event for all
            source and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PreEventConfigStartingPoint.MappingBegins">
            <summary>
            Configure a callback to be executed before any object mapping begins.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PreEventConfigStartingPoint.CreatingInstances">
            <summary>
            Configure a callback to be executed before instances of any object are created during any object 
            mapping.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.PreEventConfigStartingPoint.CreatingInstancesOf``1">
            <summary>
            Configure a callback to be executed before instances of the given type argument are created during 
            any object mapping.
            </summary>
            <typeparam name="TObject">
            The type of object the creation of which the callback execution should precede.
            </typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.PreEventMappingConfigStartingPoint`2">
            <summary>
            Provides options for configuring the execution of a callback before a particular type of event for a 
            particular source and target type.
            </summary>
            <typeparam name="TSource">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TTarget">The target type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PreEventMappingConfigStartingPoint`2.MappingBegins">
            <summary>
            Configure a callback to be executed before a mapping from and to the source and target types being 
            configured ends.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.PreEventMappingConfigStartingPoint`2.Mapping``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Configure a callback to be executed before the given <paramref name="targetMember"/> is populated
            during a mapping from and to the source and target types being configured.
            </summary>
            <param name="targetMember">
            The member of the target type being configured the population of which the callback execution should 
            precede.
            </param>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PreEventMappingConfigStartingPoint`2.CreatingInstances">
            <summary>
            Configure a callback to be executed before instances of any object are created during a mapping 
            from and to the source and target types being configured.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.PreEventMappingConfigStartingPoint`2.CreatingTargetInstances">
            <summary>
            Configure a callback to be executed before instances of the target type being configured are created 
            during a mapping from the source type being configured.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.PreEventMappingConfigStartingPoint`2.CreatingInstancesOf``1">
            <summary>
            Configure a callback to be executed before instances of the given type argument are created during a 
            mapping from and to the source and target types being configured.
            </summary>
            <typeparam name="TObject">
            The type of object the creation of which the callback execution should precede.
            </typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IConditionalProjectionConfigurator`2">
            <summary>
            Provides options for configuring a condition which must evaluate to true for the configuration to apply
            to mappings from and to the source and result types being configured.
            </summary>
            <typeparam name="TSourceElement">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IConditionalProjectionConfigurator`2.If(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Configure a condition which must evaluate to true for the configuration to apply. The condition
            expression is passed the source element being projected.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <returns>An IConditionalRootProjectionConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IConditionalRootProjectionConfigurator`2">
            <summary>
            Provides options for configuring a mapping based on the preceding condition.
            </summary>
            <typeparam name="TSourceElement">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IConditionalRootProjectionConfigurator`2.MapTo``1">
            <summary>
            Project the source Type being configured to the derived result type specified by 
            <typeparamref name="TDerivedResult"/> if the preceding condition evaluates to true.
            </summary>
            <typeparam name="TDerivedResult">The derived result type to create.</typeparam>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the source 
            and result type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IConditionalRootProjectionConfigurator`2.MapToNull">
            <summary>
            Project the result Type being configured to null if the preceding condition evaluates to true.
            </summary>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the 
            source and result Type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.ICustomProjectionDataSourceTargetMemberSpecifier`2">
            <summary>
            Provides options for specifying a result member to which a configuration option should apply.
            </summary>
            <typeparam name="TSourceElement">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.ICustomProjectionDataSourceTargetMemberSpecifier`2.To``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Apply the configuration to the given <paramref name="resultMember"/>.
            </summary>
            <typeparam name="TResultValue">The target member's type.</typeparam>
            <param name="resultMember">The result member to which to apply the configuration.</param>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the 
            source and target type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.ICustomProjectionDataSourceTargetMemberSpecifier`2.ToCtor``1">
            <summary>
            Apply the configuration to the constructor parameter with the type specified by the type argument.
            </summary>
            <typeparam name="TTargetParam">The result constructor parameter's type.</typeparam>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the source 
            and result type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.ICustomProjectionDataSourceTargetMemberSpecifier`2.ToCtor(System.String)">
            <summary>
            Apply the configuration to the constructor parameter with the specified <paramref name="parameterName"/>.
            </summary>
            <param name="parameterName">The result constructor parameter's name.</param>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the source and 
            result type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionConfigurator`2">
            <summary>
            Provides options for configuring query projections from and to given source and result element Types.
            </summary>
            <typeparam name="TSourceElement">The source element Type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result element Type to which the configuration should apply.</typeparam>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2">
            <summary>
            Provides options for configuring query projections from and to given source and result element Types, inline.
            </summary>
            <typeparam name="TSourceElement">The source element Type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result element Type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.WhenMapping">
            <summary>
            Configure how this mapper performs a projection, inline. Use this property to switch from 
            configuration of the root Types on which the projection is being performed to configuration 
            of any other Types.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.ThrowNowIfMappingPlanIsIncomplete">
            <summary>
            Throw an exception upon execution of this statement if the projection being configured has any result 
            members which will not be mapped, projects from a source enum to a target enum which does not support 
            all of its values, or includes complex Types which cannot be constructed. Use calls to this method to 
            validate a mapping plan; remove them in production 
            code.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.UseNamePrefix(System.String)">
            <summary>
            Expect members of the source and result element Types being projected to potentially have the given 
            name <paramref name="prefix"/>. Source and result element members will be matched as if the prefix 
            is absent.
            </summary>
            <param name="prefix">The prefix to ignore when matching source and result element members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2"/> with which to 
            configure further settings for the source and result element Types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.UseNamePrefixes(System.String[])">
            <summary>
            Expect members of the source and result element Types being mapped to potentially have any of the given 
            name <paramref name="prefixes"/>. Source and result element members will be matched as if the prefixes 
            are absent.
            </summary>
            <param name="prefixes">The prefixes to ignore when matching source and result element members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2"/> with which to 
            configure further settings for the source and result element Types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.UseNameSuffix(System.String)">
            <summary>
            Expect members of the source and result element Types being mapped to potentially have the given name 
            <paramref name="suffix"/>. Source and target members will be matched as if the suffix is absent.
            </summary>
            <param name="suffix">The suffix to ignore when matching source and result element members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2"/> with which to 
            configure further settings for the source and result element Types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.UseNameSuffixes(System.String[])">
            <summary>
            Expect members of the source and result element Types being mapped to potentially have any of the given name 
            <paramref name="suffixes"/>. Source and target members will be matched as if the suffixes are absent.
            </summary>
            <param name="suffixes">The suffixes to ignore when matching source and result element members.</param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2"/> with which to 
            configure further settings for the source and result element Types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.UseNamePattern(System.String)">
            <summary>
            Expect members of the source and result element Types being mapped to potentially match the given name 
            <paramref name="pattern"/>. The pattern will be used to find the part of a name which should be used 
            to match a source and result element member.
            </summary>
            <param name="pattern">
            The Regex pattern to check against source and result element member names. The pattern is expected to 
            start with the ^ character, end with the $ character and contain a single capturing group wrapped in 
            parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2"/> with which to 
            configure further settings for the source and result element Types being mapped.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2.UseNamePatterns(System.String[])">
            <summary>
            Expect members of the source and result element Types being mapped to potentially match the given name 
            <paramref name="patterns"/>. The patterns will be used to find the part of a name which should be used 
            to match a source and result element member.
            </summary>
            <param name="patterns">
            The Regex patterns to check against source and result element member names. Each pattern is expected to 
            start with the ^ character, end with the $ character and contain a single capturing group wrapped in 
            parentheses, e.g. ^__(.+)__$
            </param>
            <returns>
            This <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator`2"/> with which to 
            configure further settings for the source and result element Types being mapped.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionSettings`2">
            <summary>
            Provides options for configuring settings for mappings from and to a given source and result type.
            </summary>
            <typeparam name="TSourceElement">The source type to which the configured settings should apply.</typeparam>
            <typeparam name="TResultElement">The result type to which the configured settings should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionSettings`2.RecurseToDepth(System.Int32)">
            <summary>
            Project recursive relationships to the specified <paramref name="recursionDepth"/>.
            For example, when projecting a Category entity which has a SubCategories property of Type 
            IEnumerable{Category}, a recursion depth of 1 will populate the sub-categories of the sub-categories
            of the top-level Category selected; a recursion depth of 2 will populate the sub-categories of the 
            sub-categories of the sub-categories of the top-level Category selected, etc. The default is zero,
            which only populates the first level of sub-categories.
            </summary>
            <param name="recursionDepth">The depth to which to populate projected recursive relationships.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionSettings`2.PairEnum``1(``0)">
            <summary>
            Configure this mapper to pair the given <paramref name="enumMember"/> with a member of another 
            enum Type.
            </summary>
            <typeparam name="TPairingEnum">The type of the enum member to pair.</typeparam>
            <param name="enumMember">The first enum member in the pair.</param>
            <returns>
            An IProjectionEnumPairSpecifier with which to specify the enum member to which the given 
            <paramref name="enumMember"/> should be paired.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionSettings`2.And">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionConfigurator`2"/>, for 
            api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IGlobalProjectionSettings">
            <summary>
            Provides options for globally configuring how all mappers will perform query projections.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Projection.IGlobalProjectionSettings.AndWhenMapping">
            <summary>
            Gets a link back to the full <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigStartingPoint"/>, for api fluency.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigContinuation`2">
            <summary>
            Enables chaining of configurations for the same source and result type.
            </summary>
            <typeparam name="TSourceElement">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result type to which the configuration should apply.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigContinuation`2.And">
            <summary>
            Perform another configuration of how this mapper projects to and from the source and result types
            being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigContinuation`2.But">
            <summary>
            Perform an alternative configuration of how this mapper projects to and from the source and result 
            types being configured. This property exists purely to provide a more fluent configuration interface.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigStartingPoint">
            <summary>
            Provides options for configuring how a mapper performs a query projection.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigStartingPoint.StringsFrom``1(System.Action{AgileObjects.AgileMapper.Configuration.StringFormatSpecifier})">
            <summary>
            Configure a formatting string to use when projecting from the given <typeparamref name="TSourceValue"/>
            to strings, for all source and result Types. The configured formatting string will have to be supported
            by the QueryProvider, and may be ignored if it is not.
            </summary>
            <typeparam name="TSourceValue">The source value type to which to apply a formatting string.</typeparam>
            <param name="formatSelector">An action which supplies the formatting string.</param>
            <returns>
            An <see cref="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IGlobalProjectionSettings"/> with which to globally configure other query projection 
            aspects.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigStartingPoint.From``1">
            <summary>
            Configure how this mapper performs projections from the <typeparamref name="TSource"/> Type.
            </summary>
            <typeparam name="TSource">The source Type to which the configuration will apply.</typeparam>
            <returns>
            An IProjectionResultSelector with which to specify to which result Type the configuration 
            will apply.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionConfigStartingPoint.ProjectionsTo``1">
            <summary>
            Configure how this mapper performs query projection mappings from any source type to the
            <typeparamref name="TResult"/> Type.
            </summary>
            <typeparam name="TResult">The result Type to which the configuration will apply.</typeparam>
            <returns>An IFullProjectionConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionDerivedPairTargetTypeSpecifier`2">
            <summary>
            Enables the selection of a derived result type to which to match a configured source type.
            </summary>
            <typeparam name="TSourceElement">
            The type of source object for which the derived type pair is being configured.
            </typeparam>
            <typeparam name="TResultElement">
            The type of result object for which the derived type pair is being configured.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionDerivedPairTargetTypeSpecifier`2.To``1">
            <summary>
            Map the derived source type being configured to the derived result type specified by the type argument.
            </summary>
            <typeparam name="TDerivedResult">
            The derived result type to create for the configured derived source type.
            </typeparam>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the source and 
            result type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionEnumPairSpecifier`2">
            <summary>
            Provides options for specifying the enum member(s) with which the previously-specified enum member(s) 
            should be paired.
            </summary>
            <typeparam name="TSource">The source type being configured.</typeparam>
            <typeparam name="TTarget">The target type being configured.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionEnumPairSpecifier`2.With``1(``0[])">
            <summary>
            Configure this mapper to project the previously-specified enum member(s) to the given 
            <paramref name="pairedEnumMembers"/>.
            </summary>
            <typeparam name="TPairedEnum">The type of enum the members of which are being paired.</typeparam>
            <param name="pairedEnumMembers">
            One or more enum members to pair to the previously-specified enum members.
            </param>
            <returns>An IProjectionConfigContinuation with which to configure other aspects of mapping.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionFactorySpecifier`3">
            <summary>
            Provides an option for configuring a custom factory Expression with which to create instances of the 
            <typeparamref name="TObject"/> Type, when projecting from and to the source and result types being
            configured.
            </summary>
            <typeparam name="TSourceElement">The source Type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result Type to which the configuration should apply.</typeparam>
            <typeparam name="TObject">The Type of object which will be created by the configured factory.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionFactorySpecifier`3.Using(System.Linq.Expressions.Expression{System.Func{`0,`2}})">
            <summary>
            Use the given <paramref name="factory"/> expression to create instances of the object type being 
            configured. The factory expression is passed the source element being projected, and must be 
            translatable by the QueryProvider being used.
            </summary>
            <param name="factory">
            The factory expression to use to create instances of the type being configured.
            </param>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of projections from and to the 
            source and result Type being configured.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionResultSelector`1">
            <summary>
            Provides options for specifying the target type and mapping rule set to which the configuration should
            apply.
            </summary>
            <typeparam name="TSourceElement">The source type being configured.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IProjectionResultSelector`1.ProjectedTo``1">
            <summary>
            Configure how this mapper performs query projections from the source Type being configured to the 
            result Type specified by the given <typeparamref name="TResultElement"/> argument.
            </summary>
            <typeparam name="TResultElement">The result Type to which the configuration will apply.</typeparam>
            <returns>An IFullProjectionConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2">
            <summary>
            Provides options for configuring projections from and to a given source and result type.
            </summary>
            <typeparam name="TSourceElement">The source type to which the configuration should apply.</typeparam>
            <typeparam name="TResultElement">The result type to which the configuration should apply.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2.CreateInstancesUsing(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Use the given <paramref name="factory"/> expression to create instances of the result type being 
            configured. The factory expression is passed the source element being projected, and must be 
            translatable by the QueryProvider being used.
            </summary>
            <param name="factory">
            The factory expression to use to create instances of the Type being configured.
            </param>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of projections from and to the 
            source and result Type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2.CreateInstancesOf``1">
            <summary>
            Configure a factory to use to create instances of the <typeparamref name="TObject"/> Type.
            </summary>
            <typeparam name="TObject">The Type of object the creation of which is to be configured.</typeparam>
            <returns>
            An IProjectionFactorySpecifier with which to configure the factory for the 
            <typeparamref name="TObject"/> Type.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2.Ignore(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Ignore the specified <paramref name="resultMembers"/> when projecting from and to the source and 
            result types being configured.
            </summary>
            <param name="resultMembers">The result member(s) which should be ignored.</param>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the source 
            and result type being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2.IgnoreTargetMembersOfType``1">
            <summary>
            Ignore all result member(s) of the given <typeparamref name="TMember">Type</typeparamref> when projecting
            from and to the source and result types being configured.
            </summary>
            <typeparam name="TMember">The Type of result member to ignore.</typeparam>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of projections from and to the source and 
            result types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2.IgnoreTargetMembersWhere(System.Linq.Expressions.Expression{System.Func{AgileObjects.AgileMapper.Configuration.TargetMemberSelector,System.Boolean}})">
            <summary>
            Ignore all result member(s) matching the given <paramref name="memberFilter"/> when projecting
            from and to the source and result types being configured.
            </summary>
            <param name="memberFilter">The matching function with which to select result members to ignore.</param>
            <returns>
            An IProjectionConfigContinuation to enable further configuration of mappings from and to the source and 
            result types being configured.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configure a custom data source for a particular result member when mapping from and to the source and 
            result types being configured. The factory expression is passed the source element being projected.
            </summary>
            <typeparam name="TSourceValue">The type of the custom value being configured.</typeparam>
            <param name="valueFactoryExpression">The expression to map to the configured result member.</param>
            <returns>
            A CustomDataSourceTargetMemberSpecifier with which to specify the result member to which the custom 
            value should be applied.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.Projection.IRootProjectionConfigurator`2.Map``1(``0)">
            <summary>
            Configure a constant value for a particular result member when projecting from and to the source and 
            result types being configured.
            </summary>
            <typeparam name="TSourceValue">The type of the custom constant value being configured.</typeparam>
            <param name="value">The constant value to map to the configured result member.</param>
            <returns>
            A CustomDataSourceTargetMemberSpecifier with which to specify the result member to which the custom 
            constant value should be applied.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1">
            <summary>
            Provides options for specifying the target type and mapping rule set to which the configuration should
            apply.
            </summary>
            <typeparam name="TSource">The source type being configured.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.To``1">
            <summary>
            Configure how this mapper performs mappings from the source type being configured in all MappingRuleSets 
            (create new, overwrite, etc), to the target type specified by the given <typeparamref name="TTarget"/> 
            argument.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.ToANew``1">
            <summary>
            Configure how this mapper performs mappings from the source type being configured to the result 
            type specified by the given <typeparamref name="TResult"/> argument when mapping to new objects.
            </summary>
            <typeparam name="TResult">The result type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.OnTo``1">
            <summary>
            Configure how this mapper performs mappings from the source type being configured to the target 
            type specified by the given <typeparamref name="TTarget"/> argument when performing OnTo (merge) 
            mappings.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.Over``1">
            <summary>
            Configure how this mapper performs mappings from the source type being configured to the target 
            type specified by the given <typeparamref name="TTarget"/> argument when performing Over (overwrite) 
            mappings.
            </summary>
            <typeparam name="TTarget">The target type to which the configuration will apply.</typeparam>
            <returns>An IFullMappingConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.ProjectedTo``1">
            <summary>
            Configure how this mapper performs query projections from the source type being configured to the 
            result type specified by the given <typeparamref name="TResult"/> argument.
            </summary>
            <typeparam name="TResult">The result type to which the configuration will apply.</typeparam>
            <returns>An IFullProjectionConfigurator with which to complete the configuration.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.ToDictionaries">
            <summary>
            Configure how this mapper performs mappings from the source type being configured in all MappingRuleSets 
            (create new, overwrite, etc), to target Dictionaries.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.ToDictionariesWithValueType``1">
            <summary>
            Configure how this mapper performs mappings from the source type being configured in all MappingRuleSets 
            (create new, overwrite, etc), to target Dictionary{string, <typeparamref name="TValue"/>} instances.
            </summary>
            <typeparam name="TValue">
            The type of values contained in the Dictionary to which the configuration will apply.
            </typeparam>
            <returns>An ITargetDictionaryConfigSettings with which to continue the configuration.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Api.Configuration.TargetSpecifier`1.ToDynamics">
            <summary>
            Configure how this mapper performs mappings from the source type being configured in all MappingRuleSets 
            (create new, overwrite, etc), to target ExpandoObjects.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.IFlatteningSelector`1">
            <summary>
            Provides options for selecting the type of flattening to perform on an object.
            </summary>
            <typeparam name="TSource">The Type of object to be flattened.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IFlatteningSelector`1.ToDynamic(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,System.Dynamic.ExpandoObject}}}[])">
            <summary>
            Flatten to an ExpandoObject using the default <see cref="T:AgileObjects.AgileMapper.IMapper"/> and any given 
            <paramref name="configurations"/>.
            </summary>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining these 
            inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping API.
            </param>
            <returns>An ExpandoObject dynamic containing the flattened source object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IFlatteningSelector`1.ToDictionary(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,System.Collections.Generic.Dictionary{System.String,System.Object}}}}[])">
            <summary>
            Flatten to an IDictionary{string, object} using the default <see cref="T:AgileObjects.AgileMapper.IMapper"/> and any given 
            <paramref name="configurations"/>.
            </summary>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining these 
            inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping API.
            </param>
            <returns>
            An IDictionary{string, object} implementation containing the flattened source object.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IFlatteningSelector`1.ToDictionary``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,System.Collections.Generic.Dictionary{System.String,``0}}}}[])">
            <summary>
            Flatten to an IDictionary{string, TValue} using the default <see cref="T:AgileObjects.AgileMapper.IMapper"/> and any given 
            <paramref name="configurations"/>.
            </summary>
            <typeparam name="TValue">
            The Type of objects to store in the result IDictionary{string, TValue}. Values which cannot be 
            converted to this Type will be ignored.
            </typeparam>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining these 
            inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping  API.
            </param>
            <returns>
            An IDictionary{string, TValue} implementation containing the flattened source object.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IFlatteningSelector`1.ToQueryString(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,System.Collections.Generic.Dictionary{System.String,System.String}}}}[])">
            <summary>
            Flatten the source object into an ampersand-separted, key=value pair query string format, using the 
            default <see cref="T:AgileObjects.AgileMapper.IMapper"/> and any given <paramref name="configurations"/>. The value is returned 
            without a leading question mark.
            </summary>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining these 
            inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping API.
            </param>
            <returns>The flattened query-string-formatted source object data.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.IPlanTargetAndRuleSetSelector`1">
            <summary>
            Provides options to create and compile mapping functions for a particular type of mapping from the 
            source type being configured to a specified target type.
            </summary>
            <typeparam name="TSource">
            The type of source object from which the mapping function to be created will be performed.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IPlanTargetAndRuleSetSelector`1.ToANew``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Create and compile mapping functions for a create new mapping from the source type being 
            configured to the type specified by the type argument.
            </summary>
            <typeparam name="TResult">The type of object for which to create the mapping plan.</typeparam>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping functions will be configured by 
            combining these inline <paramref name="configurations"/> with any configuration already set up 
            via the Mapper.WhenMapping API.
            </param>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlan"/> object detailing the function to be executed during a mapping. To see 
            a string representation of the function assign the result to a string variable, or call .ToString().
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IPlanTargetAndRuleSetSelector`1.OnTo``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Create and compile mapping functions for an OnTo (merge) mapping from the source type being 
            configured to the type specified by the type argument.
            </summary>
            <typeparam name="TTarget">The type of object for which to create the mapping plan.</typeparam>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping functions will be configured by 
            combining these inline <paramref name="configurations"/> with any configuration already set up 
            via the Mapper.WhenMapping API.
            </param>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlan"/> object detailing the function to be executed during a mapping. To see 
            a string representation of the function assign the result to a string variable, or call .ToString().
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IPlanTargetAndRuleSetSelector`1.Over``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Create and compile mapping functions for an Over (overwrite) mapping from the source type being 
            configured to the type specified by the type argument.
            </summary>
            <typeparam name="TTarget">The type of object for which to create the mapping plan.</typeparam>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping functions will be configured by 
            combining these inline <paramref name="configurations"/> with any configuration already set up 
            via the Mapper.WhenMapping API.
            </param>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlan"/> object detailing the function to be executed during a mapping. To see 
            a string representation of the function assign the result to a string variable, or call .ToString().
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.IPlanTargetSelector`1">
            <summary>
            Provides the option to create and compile mapping functions for mappings from the source type 
            being configured to a specified target type, for all mapping types (create new, merge, overwrite).
            </summary>
            <typeparam name="TSource">
            The type of source object from which the mapping function to be created will be performed.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IPlanTargetSelector`1.To``1">
            <summary>
            Create and compile mapping functions from the source type being configured to the type specified 
            by the type argument, for all mapping types (create new, merge, overwrite).
            </summary>
            <typeparam name="TTarget">The type of object for which to create the mapping plans.</typeparam>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlanSet"/> detailing the functions to be executed during a mapping. To see 
            string representations of the functions, assign the result to an explicitly-typed string variable, 
            or call .ToString().
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IPlanTargetSelector`1.To``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Create and compile mapping functions from the source type being configured to the type specified 
            by the type argument, for all mapping types (create new, merge, overwrite).
            </summary>
            <typeparam name="TTarget">The type of object for which to create the mapping plans.</typeparam>
            <param name="configurations">
            One or more mapping configurations. The mapping functions will be configured by combining these inline 
            <paramref name="configurations"/> with any configuration already set up via the Mapper.WhenMapping API.
            </param>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlanSet"/> detailing the functions to be executed during a mapping. To see 
            string representations of the functions, assign the result to an explicitly-typed string variable, 
            or call .ToString().
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.IProjectionResultSpecifier`1">
            <summary>
            Provides options for specifying the query projection result Type.
            </summary>
            <typeparam name="TSourceElement">
            The Type of object contained in the source IQueryable{T} which should be projected
            to a result Type.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IProjectionResultSpecifier`1.To``1">
            <summary>
            Project the elements of the source IQueryable{T} to instances of the given 
            <typeparamref name="TResultElement"/>, using the default mapper.
            </summary>
            <typeparam name="TResultElement">
            The result Type to which the elements of the source IQueryable{T} should be projected.
            </typeparam>
            <returns>
            An IQueryable{TResultElement} of the source IQueryable{T} projected to instances of the given 
            <typeparamref name="TResultElement"/>. The projection is not performed until the Queryable is 
            enumerated by a call to .ToArray() or similar.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IProjectionResultSpecifier`1.To``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.Projection.IFullProjectionInlineConfigurator{`0,``0}}})">
            <summary>
            Project the elements of the source IQueryable{T} to instances of the given 
            <typeparamref name="TResultElement"/>, using the default mapper and the given 
            <paramref name="configuration"/>.
            </summary>
            <typeparam name="TResultElement">
            The result Type to which the elements of the source IQueryable{T} should be projected.
            </typeparam>
            <param name="configuration">
            An inline query projection configuration. If non-null, the query projection will be configured 
            by combining this inline <paramref name="configuration"/> with any applicable configuration 
            already set up via the Mapper.WhenMapping API.
            </param>
            <returns>
            An IQueryable{TResultElement} of the source IQueryable{T} projected to instances of the given 
            <typeparamref name="TResultElement"/>. The projection is not performed until the Queryable is 
            enumerated by a call to .ToArray() or similar.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.ITargetSelector`1">
            <summary>
            Provides options for specifying the type of mapping to perform.
            </summary>
            <typeparam name="TSource">The type of source object from which mapping is being performed.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.ToANew(System.Type)">
            <summary>
            Create an instance of the given <paramref name="resultType"/> from the specified source object.
            </summary>
            <param name="resultType">The type of object to create from the specified source object.</param>
            <returns>The result of the new object mapping.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.ToANew``1">
            <summary>
            Create an instance of <typeparamref name="TResult"/> from the specified source object.
            </summary>
            <typeparam name="TResult">The type of object to create from the specified source object.</typeparam>
            <returns>The result of the new object mapping.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.ToANew``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}})">
            <summary>
            Create an instance of <typeparamref name="TResult"/> from the specified source object, using the given 
            <paramref name="configuration"/>.
            </summary>
            <typeparam name="TResult">The type of object to create from the specified source object.</typeparam>
            <param name="configuration">
            An inline mapping configuration. If non-null, the mapping will be configured by combining this inline 
            <paramref name="configuration"/> with any configuration already set up via the  Mapper.WhenMapping API.
            </param>
            <returns>The result of the new object mapping.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.ToANew``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Create an instance of <typeparamref name="TResult"/> from the specified source object, using the given 
            <paramref name="configurations"/>.
            </summary>
            <typeparam name="TResult">The type of object to create from the specified source object.</typeparam>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining 
            these inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping API.
            </param>
            <returns>The result of the new object mapping.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.OnTo``1(``0)">
            <summary>
            Merge the specified source object on to the given <paramref name="existing"/> object.
            </summary>
            <typeparam name="TTarget">The type of object on which to perform the mapping.</typeparam>
            <param name="existing">The object on which to perform the mapping.</param>
            <returns>The mapped object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.OnTo``1(``0,System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}})">
            <summary>
            Merge the specified source object on to the given <paramref name="existing"/> object, using the given 
            <paramref name="configuration"/>.
            </summary>
            <typeparam name="TTarget">The type of object on which to perform the mapping.</typeparam>
            <param name="existing">The object on which to perform the mapping.</param>
            <param name="configuration">
            An inline mapping configuration. If non-null, the mapping will be configured by combining this inline 
            <paramref name="configuration"/> with any configuration already set up via the Mapper.WhenMapping API.
            </param>
            <returns>The mapped object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.OnTo``1(``0,System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Merge the specified source object on to the given <paramref name="existing"/> object, using the given 
            <paramref name="configurations"/>.
            </summary>
            <typeparam name="TTarget">The type of object on which to perform the mapping.</typeparam>
            <param name="existing">The object on which to perform the mapping.</param>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining 
            these inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping API.
            </param>
            <returns>The mapped object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.Over``1(``0)">
            <summary>
            Update the given <paramref name="existing"/> object using values from the specified source object.
            </summary>
            <typeparam name="TTarget">The type of object on which to perform the mapping.</typeparam>
            <param name="existing">The object on which to perform the mapping.</param>
            <returns>The mapped object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.Over``1(``0,System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}})">
            <summary>
            Update the given <paramref name="existing"/> object using values from the specified source object, 
            using the given <paramref name="configuration"/>.
            </summary>
            <typeparam name="TTarget">The type of object on which to perform the mapping.</typeparam>
            <param name="existing">The object on which to perform the mapping.</param>
            <param name="configuration">
            An inline mapping configuration. If non-null, the mapping will be configured by combining this inline 
            <paramref name="configuration"/> with any configuration already set up via the Mapper.WhenMapping API.
            </param>
            <returns>The mapped object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.ITargetSelector`1.Over``1(``0,System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Update the given <paramref name="existing"/> object using values from the specified source object, 
            using any given <paramref name="configurations"/>.
            </summary>
            <typeparam name="TTarget">The type of object on which to perform the mapping.</typeparam>
            <param name="existing">The object on which to perform the mapping.</param>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining 
            these inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping API.
            </param>
            <returns>The mapped object.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Api.IUnflatteningSelector`1">
            <summary>
            Provides options for specifying the result Type to which an unflattening should be performed.
            </summary>
            <typeparam name="TSource">The Type of object from which unflattening is being performed.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IUnflatteningSelector`1.To(System.Type)">
            <summary>
            Unflatten the given source object to an instance of the given <paramref name="resultType"/>.
            </summary>
            <param name="resultType">The type of object to create from the specified source object.</param>
            <returns>The result of the unflattening.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Api.IUnflatteningSelector`1.To``1(System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{`0,``0}}}[])">
            <summary>
            Unflatten the given source object to a <typeparamref name="TResult"/> instance.
            </summary>
            <typeparam name="TResult">The type of object to create from the specified source object.</typeparam>
            <param name="configurations">
            Zero or more mapping configurations. If supplied, the mapping will be configured by combining these 
            inline <paramref name="configurations"/> with any configuration already set up via the 
            Mapper.WhenMapping API.
            </param>
            <returns>
            The <typeparamref name="TResult"/> created by unflattening the source object.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Configuration.ApplyAfterAttribute">
            <summary>
            Marker attribute which indicates the <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> type to which it is applied
            should be applied after one or more <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> types given in the constructor.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.ApplyAfterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:AgileObjects.AgileMapper.Configuration.ApplyAfterAttribute"/> class.
            </summary>
            <param name="preceedingMapperConfigurationType">
            The <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> type after which the <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> type
            to which the <see cref="T:AgileObjects.AgileMapper.Configuration.ApplyAfterAttribute"/> is applied, should be applied.
            </param>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.ApplyAfterAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:AgileObjects.AgileMapper.Configuration.ApplyAfterAttribute"/> class.
            </summary>
            <param name="preceedingMapperConfigurationTypes">
            The <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> type(s) after which the <see cref="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration"/> type
            to which the <see cref="T:AgileObjects.AgileMapper.Configuration.ApplyAfterAttribute"/> is applied, should be applied.
            </param>
        </member>
        <member name="T:AgileObjects.AgileMapper.Configuration.MapperConfiguration">
            <summary>
            Base class for multiple, dedicated mapper configuration classes.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.Configure">
            <summary>
            Configure how mappings should be performed.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetService``1(System.String)">
            <summary>
            Use the previously-registered service provider to resolve the instance of the given
            <typeparamref name="TService"/>, optionally with the given <paramref name="name"/>. Register
            a service provider using Mapper.WhenMapping.UseServiceProvider().
            </summary>
            <typeparam name="TService">The Type of service to resolve.</typeparam>
            <param name="name">The name of the registered service instance to resolve.</param>
            <returns>
            The named <typeparamref name="TService"/> instance resolved by the registered service provider.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetServiceProvider``1">
            <summary>
            Retrieve a previously-registered service provider object of type <typeparamref name="TServiceProvider"/>.
            If no service provider object of the given type exists, a <see cref="T:AgileObjects.AgileMapper.Configuration.MappingConfigurationException"/> is
            thrown. Register a service provider using Mapper.WhenMapping.UseServiceProvider().
            </summary>
            <typeparam name="TServiceProvider">The type of previously-registered service provider object to retrieve.</typeparam>
            <returns>The previously-registered service provider object of type <typeparamref name="TServiceProvider"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.CreateNewMapper">
            <summary>
            Creates a clone of the mapper being configured including all user configurations.
            </summary>
            <returns>A cloned copy of the mapper being configured.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetPlanFor``1(``0)">
            <summary>
            Create and compile a mapping function for a particular type of mapping of the source type specified by 
            the given <paramref name="exampleInstance"/>. Use this overload for anonymous types.
            </summary>
            <typeparam name="TSource">The type of the given <paramref name="exampleInstance"/>.</typeparam>
            <param name="exampleInstance">
            An instance specifying the source type for which a mapping plan should be created.
            </param>
            <returns>
            An IPlanTargetAndRuleSetSelector with which to specify the type of mapping the function for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetPlanFor``1">
            <summary>
            Create and compile a mapping function for a particular type of mapping of the source type
            specified by the type argument.
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <returns>
            An IPlanTargetAndRuleSetSelector with which to specify the type of mapping the function for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetPlanForProjecting``1(System.Linq.IQueryable{``0})">
            <summary>
            Create and compile a query projection function from the source IQueryable Type specified by the given 
            <paramref name="exampleQueryable"/>.
            </summary>
            <typeparam name="TSourceElement">
            The type of element contained in the source IQueryable from which the projection function to be created will project.
            </typeparam>
            <param name="exampleQueryable">
            An IQueryable instance specifying the source IQueryable for which a query projection mapping plan should be created.
            </param>
            <returns>
            An IProjectionPlanTargetSelector with which to specify the target Type to which the query projection function to 
            be created should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetPlansFor``1(``0)">
            <summary>
            Create and compile mapping functions for mapping from the source type specified by the given 
            <paramref name="exampleInstance"/>, for all mapping types (create new, merge, overwrite). Use this 
            overload for anonymous types.
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <param name="exampleInstance">
            An instance specifying the source type for which a mapping plan should be created.
            </param>
            <returns>
            An IPlanTargetSelector with which to specify the target type the mapping functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetPlansFor``1">
            <summary>
            Create and compile mapping functions for the source type specified by the type argument, for all
            mapping types (create new, merge, overwrite).
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <returns>
            An IPlanTargetSelector with which to specify the target type the mapping functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.GetPlansInCache">
            <summary>
            Returns mapping plans for all mapping functions currently cached by the <see cref="T:AgileObjects.AgileMapper.IMapper"/> being configured.
            </summary>
            <returns>A string containing the currently-cached functions to be executed during mappings.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.MapperConfiguration.Before">
            <summary>
            Configure callbacks to be executed before a particular type of event occurs for all source
            and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.MapperConfiguration.After">
            <summary>
            Configure callbacks to be executed after a particular type of event occurs for all source
            and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.MapperConfiguration.WhenMapping">
            <summary>
            Configure how this mapper performs a mapping.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MapperConfiguration.ThrowNowIfAnyMappingPlanIsIncomplete">
            <summary>
            Throw an exception upon execution of this statement if any cached mapping plans have any target members 
            which will not be mapped, or map from a source enum to a target enum which does not support all of its 
            values. Use calls to this method to validate a mapping plan; remove them in production code.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Configuration.MappingConfigurationException">
            <summary>
            Represents an error that occurred during mapping configuration.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MappingConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the MappingConfigurationException class.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MappingConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MappingConfigurationException class with the given 
            <paramref name="message"/>.
            </summary>
            <param name="message">The message that describes the mapping configuration error.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.MappingConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MappingConfigurationException class with the given 
            <paramref name="message"/>.
            </summary>
            <param name="message">The message that describes the mapping configuration error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or null if no inner 
            exception exists.
            </param>
        </member>
        <member name="T:AgileObjects.AgileMapper.Configuration.TargetMemberSelector">
            <summary>
            Provides a fluent interface to select members by their characteristics.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.Name">
            <summary>
            Select target members by name. Constructor parameters will not be selected.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.Path">
            <summary>
            Select target members by their nested member path. Constructor parameters will not be selected.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.IsProperty">
            <summary>
            Select all target properties.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.IsPropertyMatching(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Select any target properties which match the given <paramref name="propertyMatcher"/>.
            </summary>
            <param name="propertyMatcher">The predicate with which to select a matching property.</param>
            <returns>
            True if the target member is a property matching the given <paramref name="propertyMatcher"/>, 
            otherwise false.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.IsField">
            <summary>
            Select all target fields.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.IsFieldMatching(System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            Select any target fields which match the given <paramref name="fieldMatcher"/>.
            </summary>
            <param name="fieldMatcher">The predicate with which to select a matching field.</param>
            <returns>
            True if the target member is a field matching the given <paramref name="fieldMatcher"/>, otherwise
            false.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.IsSetMethod">
            <summary>
            Select all target set methods.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.IsSetMethodMatching(System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            Select any target set methods which match the given <paramref name="setMethodMatcher"/>.
            </summary>
            <param name="setMethodMatcher">The predicate with which to select a matching set method.</param>
            <returns>
            True if the target member is a set method matching the given <paramref name="setMethodMatcher"/>, 
            otherwise false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.HasType``1">
            <summary>
            Select target members with the given <typeparamref name="TMember">Type</typeparamref>. Constructor
            parameters will not be selected.
            </summary>
            <typeparam name="TMember">The Type of the target members to select.</typeparam>
            <returns>
            True if the target member has the given <typeparamref name="TMember">Type</typeparamref>, otherwise
            false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.TargetMemberSelector.HasAttribute``1">
            <summary>
            Select target members with attributes of the given <typeparamref name="TAttribute">Type</typeparamref>.
            </summary>
            <typeparam name="TAttribute">The Type of attribute of the target members to select.</typeparam>
            <returns>
            True if the target member has an attribute of the given <typeparamref name="TAttribute">Type</typeparamref>, 
            otherwise false.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Configuration.StringFormatSpecifier">
            <summary>
            Enables specification of a formatting string to use when mapping from a particular source type to
            a string.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Configuration.StringFormatSpecifier.FormatUsing(System.String)">
            <summary>
            Specify the formatting string to use when mapping from the specified source type to a string.
            </summary>
            <param name="format">
            The formatting string to use when mapping from the specified source type to a string.
            </param>
        </member>
        <member name="T:AgileObjects.AgileMapper.Enumerable`1">
            <summary>
            Provides typed enumerable operations.
            </summary>
            <typeparam name="TElement">The type of enumerable element.</typeparam>
        </member>
        <member name="F:AgileObjects.AgileMapper.Enumerable`1.EmptyArray">
            <summary>
            Gets a singleton empty <typeparamref name="TElement"/> array instance.
            </summary>
        </member>
        <member name="F:AgileObjects.AgileMapper.Enumerable`1.Empty">
            <summary>
            Gets a singleton empty <typeparamref name="TElement"/> array instance.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Extensions.Internal.CollectionData">
            <summary>
            Untyped factory class for creating <see cref="T:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2"/> instances.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.Internal.CollectionData.Create``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a new <see cref="T:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2"/> instance using the given items.
            </summary>
            <typeparam name="T">The type of object stored in the source and target collections.</typeparam>
            <typeparam name="TId">The type of the stored object's identifiers.</typeparam>
            <param name="sourceItems">The collection of source items.</param>
            <param name="targetItems">The collection of target items.</param>
            <param name="idFactory">
            A Func with which to retrieve the unique identifier of an object in the source or target collections.
            </param>
            <returns>A new <see cref="T:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2"/> instance.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.Internal.CollectionData.Create``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2})">
            <summary>
            Creates a new <see cref="T:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2"/> instance using the given items.
            </summary>
            <typeparam name="TSource">The type of object stored in the source collection.</typeparam>
            <typeparam name="TTarget">The type of object stored in the target collection.</typeparam>
            <typeparam name="TId">The type of the stored object's identifiers.</typeparam>
            <param name="sourceItems">The collection of source items.</param>
            <param name="targetItems">The collection of target items.</param>
            <param name="sourceIdFactory">
            A Func with which to retrieve the unique identifier of an object in the source collection.
            </param>
            <param name="targetIdFactory">
            A Func with which to retrieve the unique identifier of an object in the target collection.
            </param>
            <returns>A new <see cref="T:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2"/> instance.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2">
            <summary>
            Helper class for merging or updating collections.
            </summary>
            <typeparam name="TSource">The type of object stored in the source collection.</typeparam>
            <typeparam name="TTarget">The type of object stored in the target collection.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2.AbsentTargetItems">
            <summary>
            Gets the items which exist in the target collection but not the source collection.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2.Intersection">
            <summary>
            Gets the items which exist in both the source and target collections.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Extensions.Internal.CollectionData`2.NewSourceItems">
            <summary>
            Gets the items which exist in the source collection but not the target collection.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Extensions.Internal.ObjectExtensions">
            <summary>
            Provides extensions methods on the Object Type. This class is not intended 
            to be used from your code.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.Internal.ObjectExtensions.GetRuntimeSourceType``1(``0)">
            <summary>
            Gets the runtime type of the given <paramref name="source"/> object.
            </summary>
            <typeparam name="TDeclared">The declared Type of the given <paramref name="source"/> object.</typeparam>
            <param name="source">The source object for which to determine the runtime Type.</param>
            <returns>The runtime type of the given <paramref name="source"/> object.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Extensions.Internal.PublicStringExtensions">
            <summary>
            Provides extension methods used by compiled mapping functions.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.Internal.PublicStringExtensions.FirstOrDefault(System.String)">
            <summary>
            Gets the string value of the first character of the <paramref name="value"/>.
            </summary>
            <param name="value">The value from which to get the first character.</param>
            <returns>
            The first character of the value if it has a length of greater than one, otherwise returns
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.Internal.PublicStringExtensions.MatchesKey(System.String,System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Determines if the <paramref name="subjectKey"/> matches the given <paramref name="queryKey"/>,
            given the given <paramref name="separator"/> and <paramref name="elementKeyPartMatcher"/>.
            </summary>
            <param name="subjectKey">The subject key for which to make the determination.</param>
            <param name="queryKey">The query key for which to make the determination.</param>
            <param name="separator">The separator to use to separate key parts while making the determination.</param>
            <param name="elementKeyPartMatcher">
            A Regex with which to match element key parts while making the determination.
            </param>
            <returns>
            True if the <paramref name="subjectKey"/> matches the given <paramref name="queryKey"/>, otherwise false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.Internal.PublicStringExtensions.MatchesKey(System.String,System.String,System.String)">
            <summary>
            Determines if the <paramref name="subjectKey"/> matches the given <paramref name="queryKey"/>, using
            the given <paramref name="separator"/> and the default element key part pattern.
            </summary>
            <param name="subjectKey">The subject key for which to make the determination.</param>
            <param name="queryKey">The query key for which to make the determination.</param>
            <param name="separator">The separator to use to separate key parts while making the determination.</param>
            <returns>
            True if the <paramref name="subjectKey"/> matches the given <paramref name="queryKey"/>, otherwise false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.Internal.PublicStringExtensions.MatchesKey(System.String,System.String)">
            <summary>
            Determines if the <paramref name="subjectKey"/> matches the given <paramref name="queryKey"/>, using
            the default separator and element key part pattern.
            </summary>
            <param name="subjectKey">The subject key for which to make the determination.</param>
            <param name="queryKey">The query key for which to make the determination.</param>
            <returns>
            True if the <paramref name="subjectKey"/> matches the given <paramref name="queryKey"/>, otherwise false.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Extensions.MappingExtensions">
            <summary>
            Provides extension methods to map object instances using the default or a specified Mapper.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.Map``1(``0)">
            <summary>
            Perform a mapping operation on this <paramref name="source"/> object using the default 
            <see cref="T:AgileObjects.AgileMapper.IMapper"/>.
            </summary>
            <typeparam name="TSource">The type of source object on which to perform the mapping.</typeparam>
            <param name="source">The source object on which to perform the mapping.</param>
            <returns>A TargetSelector with which to specify the type of mapping to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.MapUsing``1(``0,AgileObjects.AgileMapper.IMapper)">
            <summary>
            Perform a mapping operation on this <paramref name="source"/> object using the given 
            <paramref name="mapper"/>.
            </summary>
            <typeparam name="TSource">The type of source object on which to perform the mapping.</typeparam>
            <param name="source">The source object on which to perform the mapping.</param>
            <param name="mapper">
            The <see cref="T:AgileObjects.AgileMapper.IMapper"/> instance with which to perform the object creation.
            </param>
            <returns>A TargetSelector with which to specify the type of mapping to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.DeepClone``1(``0)">
            <summary>
            Perform a deep clone of this <paramref name="instance"/> using the default <see cref="T:AgileObjects.AgileMapper.IMapper"/>.
            </summary>
            <typeparam name="T">The Type of object to clone.</typeparam>
            <param name="instance">The object to clone.</param>
            <returns>A deep clone of this <paramref name="instance"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.DeepCloneUsing``1(``0,AgileObjects.AgileMapper.IMapper)">
            <summary>
            Perform a deep clone of this <paramref name="instance"/> using the given <paramref name="mapper"/>.
            </summary>
            <typeparam name="T">The Type of object to clone.</typeparam>
            <param name="instance">The object to clone.</param>
            <param name="mapper">The <see cref="T:AgileObjects.AgileMapper.IMapper"/> instance with which to perform the deep clone.</param>
            <returns>A deep clone of this <paramref name="instance"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.DeepClone``1(``0,System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{``0,``0}}}[])">
            <summary>
            Perform a deep clone of this <paramref name="instance"/> using the default <see cref="T:AgileObjects.AgileMapper.IMapper"/> and
            the given <paramref name="configurations"/>.
            </summary>
            <typeparam name="T">The Type of object to clone.</typeparam>
            <param name="instance">The object to clone.</param>
            <param name="configurations">
            One or more mapping configurations. The mapping will be configured by combining these inline 
            <paramref name="configurations"/> with any configuration already set up via the Mapper.WhenMapping API.
            </param>
            <returns>A deep clone of this <paramref name="instance"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.Flatten``1(``0)">
            <summary>
            Flatten this <paramref name="source"/> object so it has only value-type or string members, using
            the default Mapper.
            </summary>
            <typeparam name="TSource">The type of object to flatten.</typeparam>
            <param name="source">The object to flatten.</param>
            <returns>A FlatteningTypeSelector with which to select the type of flattening to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.FlattenUsing``1(``0,AgileObjects.AgileMapper.IMapper)">
            <summary>
            Flatten this <paramref name="source"/> object so it has only value-type or string members, using
            the given <paramref name="mapper"/>.
            </summary>
            <typeparam name="TSource">The type of object to flatten.</typeparam>
            <param name="source">The object to flatten.</param>
            <param name="mapper">
            The <see cref="T:AgileObjects.AgileMapper.IMapper"/> instance with which to perform the flattening.
            </param>
            <returns>A FlatteningTypeSelector with which to select the type of flattening to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.Unflatten``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Unflatten this string-keyed <paramref name="source"/> Dictionary to a specified result Type, using
            the default mapper.
            </summary>
            <typeparam name="TValue">The Type of values the source Dictionary contains.</typeparam>
            <param name="source">The dictionary from which to unflatten.</param>
            <returns>
            An IUnflatteningSelector with which to specify the target Type to which unflattening should be performed.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.UnflattenUsing``1(System.Collections.Generic.IDictionary{System.String,``0},AgileObjects.AgileMapper.IMapper)">
            <summary>
            Unflatten this string-keyed <paramref name="source"/> Dictionary to a specified result Type, using
            the given <paramref name="mapper"/>.
            </summary>
            <typeparam name="TValue">The Type of values the source Dictionary contains.</typeparam>
            <param name="source">The dictionary from which to unflatten.</param>
            <param name="mapper">
            The <see cref="T:AgileObjects.AgileMapper.IMapper"/> instance with which to perform the unflattening.
            </param>
            <returns>
            An IUnflatteningSelector with which to specify the target Type to which unflattening should be performed.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.MappingExtensions.Unflatten(AgileObjects.AgileMapper.QueryString)">
            <summary>
            Unflatten this <paramref name="queryString"/> to a specified result Type, using the default mapper.
            Strings can be converted to a <see cref="T:AgileObjects.AgileMapper.QueryString"/> instance explicitly, or by using the
            string.ToQueryString() extension method.
            </summary>
            <param name="queryString">The <see cref="T:AgileObjects.AgileMapper.QueryString"/> from which to unflatten.</param>
            <returns>
            An IUnflatteningSelector with which to specify the target Type to which unflattening should be performed.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions">
            <summary>
            Provides mapping-related extension methods for enumerables.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.Project``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Project these <paramref name="items"/> to a new enumerable of type <typeparamref name="TResult"/>,
            using the given <paramref name="projector"/>.
            </summary>
            <typeparam name="TItem">The type of object stored in the enumerable.</typeparam>
            <typeparam name="TResult">
            The type of object to which each item in the enumerable will be projected.
            </typeparam>
            <param name="items">The items to project.</param>
            <param name="projector">A Func with which to project each item in the enumerable.</param>
            <returns>An iterator to transform this enumerable.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.Project``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Project these <paramref name="items"/> to a new enumerable of type <typeparamref name="TResult"/>,
            using the given <paramref name="projector"/>.
            </summary>
            <typeparam name="TItem">The type of object stored in the enumerable.</typeparam>
            <typeparam name="TResult">
            The type of object to which each item in the enumerable will be projected.
            </typeparam>
            <param name="items">The items to project.</param>
            <param name="projector">A Func with which to project each item in the enumerable.</param>
            <returns>An iterator to transform this enumerable.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter these <paramref name="items"/> using the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="TItem">The Type of object stored in this enumerable.</typeparam>
            <param name="items">The items to filter.</param>
            <param name="predicate">The predicate with which to filter these items.</param>
            <returns>
            An enumerator yielding the <paramref name="items"/> which pass the given <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Exclude the given <paramref name="excludedItems"/> from these <paramref name="items"/>, in a
            repeated-item-aware manner.
            </summary>
            <typeparam name="T">The type of items stored in the enumerable.</typeparam>
            <param name="items">
            The items from which the <paramref name="excludedItems"/> should be excluded.
            </param>
            <param name="excludedItems">The items to exclude.</param>
            <returns>
            This set of <paramref name="items"/>, with the given <paramref name="excludedItems"/> excluded.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines if none of the objects in these <paramref name="items"/> return true when passed to
            the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of object stored in this enumerable.</typeparam>
            <param name="items">The items for which to make the determination.</param>
            <param name="predicate">The predicate to apply to each of the items.</param>
            <returns>
            True if none of these <paramref name="items"/> return true when passed to the given
            <paramref name="predicate"/>, otherwise false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.ToArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert this list of <paramref name="items"/> to an array.
            </summary>
            <typeparam name="T">The type of object stored in the list.</typeparam>
            <param name="items">The list of items to convert.</param>
            <returns>This list of items, converted to an array.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Convert this collection of <paramref name="items"/> to an array.
            </summary>
            <typeparam name="T">The type of object stored in the list.</typeparam>
            <param name="items">The collection of items to convert.</param>
            <returns>This collection of items, converted to an array.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate these <paramref name="items"/>, executing the given <paramref name="itemAction"/> on each.
            </summary>
            <typeparam name="T">The type of object stored in the enumerable.</typeparam>
            <param name="items">The enumerable to iterate.</param>
            <param name="itemAction">The action to execute on each item in the enumerable.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Action{``0,``1,System.Int32})">
            <summary>
            Iterate these <paramref name="items"/>, executing the given <paramref name="itemAction"/> on each.
            </summary>
            <typeparam name="T1">The type of the first object stored in the enumerable.</typeparam>
            <typeparam name="T2">The type of the second object stored in the enumerable.</typeparam>
            <param name="items">The enumerable to iterate.</param>
            <param name="itemAction">The action to execute on each item in the enumerable.</param>
        </member>
        <member name="T:AgileObjects.AgileMapper.Extensions.PublicStringExtensions">
            <summary>
            Provides mapping-related extension methods for strings.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Extensions.PublicStringExtensions.ToQueryString(System.String)">
            <summary>
            Convert this <paramref name="queryString"/>-formatted string to a <see cref="T:AgileObjects.AgileMapper.QueryString"/>
            instance.
            </summary>
            <param name="queryString">The query string-formatted string to convert.</param>
            <returns>A <see cref="T:AgileObjects.AgileMapper.QueryString"/> based on this <paramref name="queryString"/>.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.IMapper">
            <summary>
            Provides mapping and mapping configuration services.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.CloneSelf">
            <summary>
            Creates a clone of this mapper including all user configurations.
            </summary>
            <returns>A cloned copy of this mapper.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.GetPlanFor``1(``0)">
            <summary>
            Create and compile a mapping function for a particular type of mapping of the source type specified by 
            the given <paramref name="exampleInstance"/>. Use this overload for anonymous types.
            </summary>
            <typeparam name="TSource">The type of the given <paramref name="exampleInstance"/>.</typeparam>
            <param name="exampleInstance">
            An instance specifying the source type for which a mapping plan should be created.
            </param>
            <returns>
            An IPlanTargetAndRuleSetSelector with which to specify the type of mapping the function for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.GetPlanFor``1">
            <summary>
            Create and compile a mapping function for a particular type of mapping of the source type
            specified by the type argument.
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <returns>
            An IPlanTargetAndRuleSetSelector with which to specify the type of mapping the function for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.GetPlanForProjecting``1(System.Linq.IQueryable{``0})">
            <summary>
            Create and compile a query projection function from the source IQueryable Type specified by the given 
            <paramref name="exampleQueryable"/>.
            </summary>
            <typeparam name="TSourceElement">
            The type of element contained in the source IQueryable from which the projection function to be created will project.
            </typeparam>
            <param name="exampleQueryable">
            An IQueryable instance specifying the source IQueryable for which a query projection mapping plan should be created.
            </param>
            <returns>
            An IProjectionPlanTargetSelector with which to specify the target Type to which the query projection function to 
            be created should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.GetPlansFor``1(``0)">
            <summary>
            Create and compile mapping functions for mapping from the source type specified by the given 
            <paramref name="exampleInstance"/>, for all mapping types (create new, merge, overwrite). Use this 
            overload for anonymous types.
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <param name="exampleInstance">
            An instance specifying the source type for which a mapping plan should be created.
            </param>
            <returns>
            An IPlanTargetSelector with which to specify the target type the mapping functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.GetPlansFor``1">
            <summary>
            Create and compile mapping functions for the source type specified by the type argument, for all
            mapping types (create new, merge, overwrite).
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <returns>
            An IPlanTargetSelector with which to specify the target type the mapping functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.GetPlansInCache">
            <summary>
            Returns mapping plans for all mapping functions currently cached by the <see cref="T:AgileObjects.AgileMapper.IMapper"/>.
            </summary>
            <returns>A string containing the currently-cached functions to be executed during mappings.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.IMapper.Before">
            <summary>
            Configure callbacks to be executed before a particular type of event occurs for all source
            and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.IMapper.After">
            <summary>
            Configure callbacks to be executed after a particular type of event occurs for all source
            and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.IMapper.WhenMapping">
            <summary>
            Configure how this mapper performs a mapping.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.ThrowNowIfAnyMappingPlanIsIncomplete">
            <summary>
            Throw an exception upon execution of this statement if any cached mapping plans have any target members 
            which will not be mapped, or map from a source enum to a target enum which does not support all of its 
            values. Use calls to this method to validate a mapping plan; remove them in production code.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.DeepClone``1(``0)">
            <summary>
            Performs a deep clone of the given <paramref name="source"/> object and returns the result.
            </summary>
            <typeparam name="TSource">The type of object for which to perform a deep clone.</typeparam>
            <param name="source">The object to deep clone.</param>
            <returns>A deep clone of the given <paramref name="source"/> object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.DeepClone``1(``0,System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{``0,``0}}}[])">
            <summary>
            Perform a deep clone of the given <paramref name="source"/> object using the given 
            <paramref name="configurations"/>.
            </summary>
            <typeparam name="TSource">The type of object for which to perform a deep clone.</typeparam>
            <param name="configurations">
            One or more mapping configurations. The mapping will be configured by combining these inline 
            <paramref name="configurations"/> with any configuration already set up via the Mapper.WhenMapping API.
            </param>
            <param name="source">The object to deep clone.</param>
            <returns>A deep clone of the given <paramref name="source"/> object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.Flatten``1(``0)">
            <summary>
            Flatten the given <paramref name="source"/> object so it has only value-type or string members.
            </summary>
            <typeparam name="TSource">The type of object to flatten.</typeparam>
            <param name="source">The object to flatten.</param>
            <returns>An IFlatteningSelector with which to select the type of flattening to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.Unflatten``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Unflatten the given string-keyed <paramref name="source"/> Dictionary to a specified result Type.
            </summary>
            <typeparam name="TValue">The Type of values the source Dictionary contains.</typeparam>
            <returns>
            An IUnflatteningSelector with which to specify the target Type to which unflattening should be performed.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.Unflatten(AgileObjects.AgileMapper.QueryString)">
            <summary>
            Unflatten the given <paramref name="queryString"/> to a specified result Type, using the default mapper.
            Strings can be converted to a <see cref="T:AgileObjects.AgileMapper.QueryString"/> instance explicitly, or by using the
            string.ToQueryString() extension method.
            </summary>
            <param name="queryString">The <see cref="T:AgileObjects.AgileMapper.QueryString"/> from which to unflatten.</param>
            <returns>
            An IUnflatteningSelector with which to specify the target Type to which unflattening should be performed.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.IMapper.Map``1(``0)">
            <summary>
            Perform a mapping operation on the given <paramref name="source"/> object.
            </summary>
            <typeparam name="TSource">The type of source object on which to perform the mapping.</typeparam>
            <param name="source">The source object on which to perform the mapping.</param>
            <returns>A TargetSelector with which to specify the type of mapping to perform.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Mapper">
            <summary>
            Provides a configurable mapping service. Create new instances with Mapper.CreateNew or use the default
            instance via the static Mapper access methods.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.CreateNew">
            <summary>
            Creates an instance implementing IMapper with which to perform mappings.
            </summary>
            <returns>A new instance implementing IMapper.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.GetPlanFor``1(``0)">
            <summary>
            Create and compile mapping functions for a particular type of mapping of the source type specified by 
            the given <paramref name="exampleInstance"/>. Use this overload for anonymous types.
            </summary>
            <typeparam name="TSource">The type of the given <paramref name="exampleInstance"/>.</typeparam>
            <param name="exampleInstance">
            An instance specifying the source type for which a mapping plan should be created.
            </param>
            <returns>
            An IPlanTargetAndRuleSetSelector with which to specify the type of mapping the functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.GetPlanFor``1">
            <summary>
            Create and compile mapping functions for a particular type of mapping of the source type
            specified by the type argument.
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <returns>
            An IPlanTargetAndRuleSetSelector with which to specify the type of mapping the functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.GetPlansFor``1(``0)">
            <summary>
            Create and compile mapping functions for mapping from the source type specified by the given 
            <paramref name="exampleInstance"/>, for all mapping types (create new, merge, overwrite). Use this 
            overload for anonymous types.
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <param name="exampleInstance">
            An instance specifying the source type for which a mapping plan should be created.
            </param>
            <returns>
            An IPlanTargetSelector with which to specify the target type the mapping functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.GetPlansFor``1">
            <summary>
            Create and compile mapping functions for the source type specified by the type argument, for all
            mapping types (create new, merge, overwrite).
            </summary>
            <typeparam name="TSource">The source type for which to create the mapping functions.</typeparam>
            <returns>
            An IPlanTargetSelector with which to specify the target type the mapping functions for which 
            should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.GetPlanForProjecting``1(System.Linq.IQueryable{``0})">
            <summary>
            Create and compile a query projection function from the source IQueryable Type specified by the given 
            <paramref name="exampleQueryable"/>.
            </summary>
            <typeparam name="TSourceElement">
            The type of element contained in the source IQueryable from which the projection function to be created will project.
            </typeparam>
            <param name="exampleQueryable">
            An IQueryable instance specifying the source IQueryable for which a query projection mapping plan should be created.
            </param>
            <returns>
            An IProjectionPlanTargetSelector with which to specify the target Type to which the query projection function to 
            be created should be cached.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.GetPlansInCache">
            <summary>
            Returns mapping plans for all mapping functions currently cached by the default <see cref="T:AgileObjects.AgileMapper.IMapper"/>.
            </summary>
            <returns>A string containing the currently-cached functions to be executed during mappings.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.Mapper.Before">
            <summary>
            Configure callbacks to be executed before a particular type of event occurs for all source
            and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Mapper.After">
            <summary>
            Configure callbacks to be executed after a particular type of event occurs for all source
            and target types.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Mapper.WhenMapping">
            <summary>
            Configure how the default mapper performs a mapping.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.ThrowNowIfAnyMappingIsIncomplete">
            <summary>
            Throw an exception upon execution of this statement if any cached mappings have any target 
            members which will not be mapped. Use calls to this method to validate a mapping plan, remove 
            them in production code.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.DeepClone``1(``0)">
            <summary>
            Performs a deep clone of the given <paramref name="source"/> object and returns the result.
            </summary>
            <typeparam name="TSource">The type of object for which to perform a deep clone.</typeparam>
            <param name="source">The object to deep clone.</param>
            <returns>A deep clone of the given <paramref name="source"/> object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.DeepClone``1(``0,System.Linq.Expressions.Expression{System.Action{AgileObjects.AgileMapper.Api.Configuration.IFullMappingInlineConfigurator{``0,``0}}}[])">
            <summary>
            Performs a deep clone of the given <paramref name="source"/> object and returns the result.
            </summary>
            <typeparam name="TSource">The type of object for which to perform a deep clone.</typeparam>
            <param name="configurations">
            One or more mapping configurations. The mapping will be configured by combining these inline 
            <paramref name="configurations"/> with any configuration already set up via the Mapper.WhenMapping API.
            </param>
            <param name="source">The object to deep clone.</param>
            <returns>A deep clone of the given <paramref name="source"/> object.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.Flatten``1(``0)">
            <summary>
            Flatten the given <paramref name="source"/> object so it has only value-type or string members.
            </summary>
            <typeparam name="TSource">The type of object to flatten.</typeparam>
            <param name="source">The object to flatten.</param>
            <returns>An IFlatteningSelector with which to select the type of flattening to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.Unflatten``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Unflatten the given string-keyed <paramref name="source"/> Dictionary to a specified result Type.
            </summary>
            <typeparam name="TValue">The Type of values the source Dictionary contains.</typeparam>
            <returns>
            An IUnflatteningSelector with which to specify the target Type to which unflattening should be performed.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.Map``1(``0)">
            <summary>
            Perform a mapping operation on the given <paramref name="source"/> object.
            </summary>
            <typeparam name="TSource">The type of source object on which to perform the mapping.</typeparam>
            <param name="source">The source object on which to perform the mapping.</param>
            <returns>A TargetSelector with which to specify the type of mapping to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.ResetDefaultInstance">
            <summary>
            Removes the default Mapper's cached data. Can be useful when testing code which uses
            the static Mapper API.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Mapper.Dispose">
            <summary>
            Removes the mapper's cached data.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.MappingException">
            <summary>
            Represents an error that occurred during a mapping.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.MappingException.For(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the MappingException class.
            </summary>
            <param name="ruleSetName">The name of the mapping rule set being executed when the exception occurred.</param>
            <param name="sourcePath">The path of the source object being mapped when the exception occurred.</param>
            <param name="targetPath">The path of the target object being mapped when the exception occurred.</param>
            <param name="innerException">The exception which caused the creation of the MappingException.</param>
            <returns>A new MappingException instance.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Members.IMappingData">
            <summary>
            Provides the data being used at a particular point during a mapping.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingData.Parent">
            <summary>
            Gets the data of the mapping context directly 'above' that described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData"/>.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Members.IMappingData.GetSource``1">
            <summary>
            Gets the source object for the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData"/>, cast to the given <typeparamref name="TSource">type</typeparamref>.
            </summary>
            <typeparam name="TSource">The type to which to cast the source object.</typeparam>
            <returns>The source object for the mapping context.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Members.IMappingData.GetTarget``1">
            <summary>
            Gets the target object for the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData"/>, cast to the given <typeparamref name="TTarget">type</typeparamref>.
            </summary>
            <typeparam name="TTarget">The type to which to cast the target object.</typeparam>
            <returns>The target object for the mapping context.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Members.IMappingData.GetEnumerableIndex">
            <summary>
            Gets the index of the current enumerable being mapped in the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData"/>, if applicable.
            </summary>
            <returns>
            The index of the current enumerable being mapped in the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData"/>, otherwise null.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Members.IMappingData.As``2">
            <summary>
            Gets the <see cref="T:AgileObjects.AgileMapper.Members.IMappingData"/> as a typed <see cref="T:AgileObjects.AgileMapper.Members.IMappingData`2"/>.
            </summary>
            <typeparam name="TSource">The type of source object being mapped in the current context.</typeparam>
            <typeparam name="TTarget">The type of target object being mapped in the current context.</typeparam>
            <returns>The <see cref="T:AgileObjects.AgileMapper.Members.IMappingData"/> as a typed <see cref="T:AgileObjects.AgileMapper.Members.IMappingData`2"/>.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Members.IMappingData`2">
            <summary>
            Provides the data being used at a particular point during a mapping.
            </summary>
            <typeparam name="TSource">The type of source object being mapped from in the current context.</typeparam>
            <typeparam name="TTarget">The type of target object being mapped to in the current context.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingData`2.Parent">
            <summary>
            Gets the data of the mapping context directly 'above' that described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData`2"/>.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingData`2.Source">
            <summary>
            Gets the source object for the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData`2"/>.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingData`2.Target">
            <summary>
            Gets the target object for the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData`2"/>.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingData`2.EnumerableIndex">
            <summary>
            Gets the index of the current enumerable being mapped in the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.Members.IMappingData`2"/>, if applicable.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Members.IMappingExceptionData">
            <summary>
            Provides the data being used at a particular point during a mapping when an
            Exception occurred.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingExceptionData.Source">
            <summary>
            Gets the source object that was being being mapped from when the mapping
            Exception occurred.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingExceptionData.Target">
            <summary>
            Gets the target object that was being being mapped to when the mapping
            Exception occurred.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingExceptionData.EnumerableIndex">
            <summary>
            Gets the index of the current enumerable being mapped when the mapping
            Exception occurred, if applicable.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingExceptionData.Exception">
            <summary>
            Get the Exception object describing the error that occurred during the mapping.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Members.IMappingExceptionData`2">
            <summary>
            Provides typed data being used at a particular point during a mapping when an
            Exception occurred.
            </summary>
            <typeparam name="TSource">
            The type of source object that was being mapped from when the Exception occurred.
            </typeparam>
            <typeparam name="TTarget">
            The type of target object that was being mapped to when the Exception occurred.
            </typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.Members.IMappingExceptionData`2.Exception">
            <summary>
            Get the Exception object describing the error that occurred during the mapping.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Members.IServiceProviderAccessor">
            <summary>
            Provides access to service-provider methods or a configured Service Provider implementation.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Members.IServiceProviderAccessor.GetService``1">
            <summary>
            Use the registered service provider to resolve an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The Type of service to resolve.</typeparam>
            <returns>
            The <typeparamref name="TService"/> instance resolved by the registered service provider.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Members.IServiceProviderAccessor.GetService``1(System.String)">
            <summary>
            Use the registered service provider to resolve the instance of the given <typeparamref name="TService"/>
            with the given <paramref name="name"/>.
            </summary>
            <typeparam name="TService">The Type of service to resolve.</typeparam>
            <param name="name">The name of the registered service instance to resolve.</param>
            <returns>
            The named <typeparamref name="TService"/> instance resolved by the registered service provider.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Members.IServiceProviderAccessor.GetServiceProvider``1">
            <summary>
            Retrieve a previously-registered service provider object of type <typeparamref name="TServiceProvider"/>.
            If no service provider object of the given type exists, a <see cref="T:AgileObjects.AgileMapper.Configuration.MappingConfigurationException"/> is thrown.
            </summary>
            <typeparam name="TServiceProvider">The type of previously-registered service provider object to retrieve.</typeparam>
            <returns>The previously-registered service provider object of type <typeparamref name="TServiceProvider"/>.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1">
            <summary>
            Wraps a readonly collection to enable efficient creation of a new array. This object
            has a readonly implementation of <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of item stored in the collection.</typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Initializes a new instance of the ReadOnlyCollectionWrapper{T} class.
            </summary>
            <param name="existingItems">
            A read-only IList containing the existing items to retain in the final collection.
            </param>
            <param name="numberOfNewItems">The number of new items to be added to the existing items.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item.
            </summary>
            <param name="item">The object to locate in the</param>
            <returns>The index of item if found; otherwise, -1.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>True if item is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection`1 to an array,
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the 
            collection. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove.</param>
            <returns>
            True if the item was successfully removed from the collection, otherwise false. 
            This method also returns false if item is not found in the original collection.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.ToArray">
            <summary>
            Returns an array containing the contents of the <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1"/>.
            </summary>
            <returns>An array containing the contents of the <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1.ToReadOnlyCollection">
            <summary>
            Returns a ReadOnlyCollection containing the contents of the <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1"/>.
            </summary>
            <returns>
            A ReadOnlyCollection containing the contents of the <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.Enumerables.ReadOnlyCollectionWrapper`1"/>.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectCreationMappingData`3">
            <summary>
            Provides the data being used when an object was created during a mapping.
            </summary>
            <typeparam name="TSource">The type of source object being mapped from during the object creation.</typeparam>
            <typeparam name="TTarget">The type of target object being mapped to during the object creation.</typeparam>
            <typeparam name="TObject">The type of object that was created.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.ObjectPopulation.IObjectCreationMappingData`3.CreatedObject">
            <summary>
            Gets the object that was created.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2">
            <summary>
            Provides the data being used and services available at a particular point during a mapping.
            </summary>
            <typeparam name="TSource">The type of source object being mapped from in the current context.</typeparam>
            <typeparam name="TTarget">The type of target object being mapped to in the current context.</typeparam>
        </member>
        <member name="P:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2.Parent">
            <summary>
            Gets the data of the mapping context directly 'above' that described by the 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2.Target">
            <summary>
            Gets or sets the target object for the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2.CreatedObject">
            <summary>
            Gets or sets the object created by the current mapping context, if applicable.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2.Map``2(``0,``1,System.String,System.Int32)">
            <summary>
            Map the given <paramref name="sourceValue"/> to the given <paramref name="targetValue"/>.
            </summary>
            <typeparam name="TDeclaredSource">
            The declared type of the given <paramref name="sourceValue"/>.
            </typeparam>
            <typeparam name="TDeclaredTarget">
            The declared type of the given <paramref name="targetValue"/>.
            </typeparam>
            <param name="sourceValue">The source object from which to map.</param>
            <param name="targetValue">The target object to which to map.</param>
            <param name="targetMemberName">The name of the target member being mapped.</param>
            <param name="dataSourceIndex">
            The index of the data source being used to perform the mapping.
            </param>
            <returns>The mapping result.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2.Map``2(``0,``1,System.Int32)">
            <summary>
            Map the given <paramref name="sourceElement"/> to the given <paramref name="targetElement"/>.
            </summary>
            <typeparam name="TSourceElement">
            The declared type of the given <paramref name="sourceElement"/>.
            </typeparam>
            <typeparam name="TTargetElement">
            The declared type of the given <paramref name="targetElement"/>.
            </typeparam>
            <param name="sourceElement">The source object from which to map.</param>
            <param name="targetElement">The target object to which to map.</param>
            <param name="enumerableIndex">
            The index of the current enumerable the elements of which are being mapped.
            </param>
            <returns>The element mapping result.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2.WithSourceType``2(System.Boolean)">
            <summary>
            Gets the <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> typed as a 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> when the target object definitely
            cannot be converted to the given <typeparamref name="TNewTarget"/>.
            </summary>
            <typeparam name="TNewSource">The type of source object being mapped in the current context.</typeparam>
            <typeparam name="TNewTarget">The type of target object being mapped in the current context.</typeparam>
            <param name="isForDerivedTypeMapping">
            Whether the new, typed <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> is needed for the creation
            of a derived type mapping.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> typed as a 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2.WithTargetType``2(System.Boolean)">
            <summary>
            Gets the <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> typed as a 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> when the source object definitely
            cannot be converted to the given <typeparamref name="TNewSource"/>.
            </summary>
            <typeparam name="TNewSource">The type of source object being mapped in the current context.</typeparam>
            <typeparam name="TNewTarget">The type of target object being mapped in the current context.</typeparam>
            <param name="isForDerivedTypeMapping">
            Whether the new, typed <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> is needed for the creation
            of a derived type mapping.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> typed as a 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataFactoryBridge">
            <summary>
            Provides bridge methods enabling creation of typed <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>
            instances in partial trust scenarios. This interface is intended for internal use only.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataFactoryBridge.ForChild``2(System.Object,System.Object)">
            <summary>
            Creates a child <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> instance.
            </summary>
            <typeparam name="TSource">The type of child source object being mapped from.</typeparam>
            <typeparam name="TTarget">The type of child target object being mapped to.</typeparam>
            <param name="childMembersSource">
            An object providing access to objects describing the child members being mapped
            from and to.
            </param>
            <param name="parent">
            An object representing the parent <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </param>
            <returns>A child <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> instance.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataFactoryBridge.ForElement``2(System.Object)">
            <summary>
            Creates an element <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> instance.
            </summary>
            <typeparam name="TSource">The type of source element object being mapped from.</typeparam>
            <typeparam name="TTarget">The type of target element object being mapped to.</typeparam>
            <param name="parent">
            An object representing the parent <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </param>
            <returns>An element <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> instance.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataFactoryBridge.CreateMappingData``4(``0,``1,System.Nullable{System.Int32},System.Object,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> instance.
            </summary>
            <typeparam name="TDeclaredSource">
            The declared type of child source object being mapped from.
            </typeparam>
            <typeparam name="TDeclaredTarget">
            The declared type of child target object being mapped to.
            </typeparam>
            <typeparam name="TSource">The actual type of child source object being mapped from.</typeparam>
            <typeparam name="TTarget">The actual type of child target object being mapped to.</typeparam>
            <param name="source">The source object being mapped from.</param>
            <param name="target">The target object being mapped to.</param>
            <param name="enumerableIndex">
            The index of the current enumerable being mapped, if applicable.
            </param>
            <param name="mapperKey">A key object uniquely identifying the context being mapped.</param>
            <param name="mappingContext">An object describing the context of the current mapping.</param>
            <param name="parent">
            An <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> describing the parent context.
            </param>
            <returns></returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped">
            <summary>
            Provides untyped services available at a particular point in a mapping.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped.TryGet``2(``0,``1@)">
            <summary>
            Returns a value indicating if the given <paramref name="key">source object</paramref>
            has already been mapped to a target object of the given 
            <typeparamref name="TComplex">target type</typeparamref>. If so, the previous mapping
            result is assigned to the <paramref name="complexType"/> parameter.
            </summary>
            <typeparam name="TKey">
            The type of source object for which to make the determination.
            </typeparam>
            <typeparam name="TComplex">
            The type of target object for which to make the determination.</typeparam>
            <param name="key">The source object for which to make the determination.</param>
            <param name="complexType">
            The target object to which to assign the already-mapped result object, if applicable.
            </param>
            <returns>
            True if the given <paramref name="key">source object</paramref> has already been mapped 
            to a target object of the given <typeparamref name="TComplex">target type</typeparamref>,
            otherwise false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped.Register``2(``0,``1)">
            <summary>
            Registers the given <paramref name="complexType">target object</paramref> as the result of
            mapping the given <paramref name="key">source object</paramref>.
            </summary>
            <typeparam name="TKey">The type of source object to register.</typeparam>
            <typeparam name="TComplex">The type of target object to register.</typeparam>
            <param name="key">The source object to register.</param>
            <param name="complexType">The result target object to register.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped.MapRepeated``2(``0,``1,System.Nullable{System.Int32},System.String,System.Int32)">
            <summary>
            Map the given <paramref name="sourceValue"/> to the given <paramref name="targetValue"/> as 
            part of the mapping of a source and target type mapped multiple times within the object graph.
            </summary>
            <typeparam name="TDeclaredSource">
            The declared type of the given <paramref name="sourceValue"/>.
            </typeparam>
            <typeparam name="TDeclaredTarget">
            The declared type of the given <paramref name="targetValue"/>.
            </typeparam>
            <param name="sourceValue">The source object from which to map.</param>
            <param name="targetValue">The target object to which to map.</param>
            <param name="enumerableIndex">
            The index of the current enumerable being mapped in the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped"/>, if applicable.
            </param>
            <param name="targetMemberName">The name of the target member being mapped.</param>
            <param name="dataSourceIndex">
            The index of the data source being used to perform the mapping.
            </param>
            <returns>The mapping result.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped.MapRepeated``2(``0,``1,System.Int32)">
            <summary>
            Map the given <paramref name="sourceElement"/> to the given <paramref name="targetElement"/> as 
            part of the mapping of a source and target element type mapped multiple times within the
            object graph.
            </summary>
            <typeparam name="TDeclaredSource">
            The declared type of the given <paramref name="sourceElement"/>.
            </typeparam>
            <typeparam name="TDeclaredTarget">
            The declared type of the given <paramref name="targetElement"/>.
            </typeparam>
            <param name="sourceElement">The source element from which to map.</param>
            <param name="targetElement">The target element to which to map.</param>
            <param name="enumerableIndex">
            The index of the current enumerable being mapped in the mapping context described by the 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped"/>
            </param>
            <returns>The mapping result.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped.As``2(System.Boolean)">
            <summary>
            Gets the <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped"/> typed as a 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </summary>
            <typeparam name="TNewSource">The type of source object being mapped in the current context.</typeparam>
            <typeparam name="TNewTarget">The type of target object being mapped in the current context.</typeparam>
            <param name="isForDerivedTypeMapping">
            Whether the new, typed <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/> is needed for the creation
            of a derived type mapping.
            </param>
            <returns>
            The <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingDataUntyped"/> typed as a 
            <see cref="T:AgileObjects.AgileMapper.ObjectPopulation.IObjectMappingData`2"/>.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Plans.MappingPlan">
            <summary>
            Contains details of the mapping plan for a mapping between a particular source and target type,
            for a particular mapping type (create new, merge, overwrite).
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Plans.MappingPlan.op_Implicit(AgileObjects.AgileMapper.Plans.MappingPlan)~System.String">
            <summary>
            Converts the given <paramref name="mappingPlan"/> to its string representation.
            </summary>
            <param name="mappingPlan">The <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlan"/> to convert.</param>
            <returns>The string representation of the given <paramref name="mappingPlan"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Plans.MappingPlan.ToString">
            <summary>
            Returns the string representation of the <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlan"/>.
            </summary>
            <returns>The string representation of the <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlan"/>.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Plans.MappingPlanSet">
            <summary>
            Contains sets of details of mapping plans for mappings between a particular source and target types,
            for particular mapping types (create new, merge, overwrite).
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Plans.MappingPlanSet.op_Implicit(AgileObjects.AgileMapper.Plans.MappingPlanSet)~System.String">
            <summary>
            Converts the given <paramref name="mappingPlans">MappingPlanSet</paramref> to its string 
            representation.
            </summary>
            <param name="mappingPlans">The <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlanSet"/> to convert.</param>
            <returns>
            The string representation of the <paramref name="mappingPlans">MappingPlanSet</paramref>.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.Plans.MappingPlanSet.ToString">
            <summary>
            Returns the string representation of the <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlanSet"/>.
            </summary>
            <returns>The string representation of the <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlanSet"/>.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.ProjectionExtensions">
            <summary>
            Provides extension methods to support projecting an IQueryable to an IQueryable of a different type.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.ProjectionExtensions.Project``1(System.Linq.IQueryable{``0})">
            <summary>
            Project the elements of the given <paramref name="sourceQueryable"/> to instances of a specified 
            result Type, using the default mapper. The projection operation is performed entirely on the data source.
            </summary>
            <typeparam name="TSourceElement">The Type of the elements to project to a new result Type.</typeparam>
            <param name="sourceQueryable">The source IQueryable{T} on which to perform the projection.</param>
            <returns>An IProjectionResultSpecifier with which to specify the type of query projection to perform.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.ProjectionExtensions.ProjectUsing``1(System.Linq.IQueryable{``0},AgileObjects.AgileMapper.IMapper)">
            <summary>
            Project the elements of the given <paramref name="sourceQueryable"/> to instances of a specified 
            result Type, using the given <paramref name="mapper"/>. The projection operation is performed 
            entirely on the data source.
            </summary>
            <typeparam name="TSourceElement">The Type of the elements to project to a new result Type.</typeparam>
            <param name="sourceQueryable">The source IQueryable{T} on which to perform the projection.</param>
            <param name="mapper">The mapper with which the projection should be performed.</param>
            <returns>An IProjectionResultSpecifier with which to specify the type of query projection to perform.</returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Queryables.Api.IProjectionPlanTargetSelector`1">
            <summary>
            Provides options to create and compile a query projection function from the source type being configured 
            to a specified target type.
            </summary>
            <typeparam name="TSourceElement">
            The type of element contained in the source IQueryable from which the projection function to be created will project.
            </typeparam>
        </member>
        <member name="M:AgileObjects.AgileMapper.Queryables.Api.IProjectionPlanTargetSelector`1.To``1">
            <summary>
            Create and compile a query projection function from the source type being configured to the type specified 
            by the type argument.
            </summary>
            <typeparam name="TResult">The type of target object for which to create the query projection mapping plan.</typeparam>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.Plans.MappingPlan"/> object detailing the function to be executed during a query projection, using 
            the given source IQueryable. To see a string representation of the function assign the result to a string 
            variable, or call .ToString().
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.QueryString">
            <summary>
            Encapsulates a query string-formatted string.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.op_Explicit(AgileObjects.AgileMapper.QueryString)~System.String">
            <summary>
            Converts the <paramref name="queryString" /> to its string representation.
            </summary>
            <param name="queryString">The <see cref="T:AgileObjects.AgileMapper.QueryString"/> to convert.</param>
            <returns>The string representation of the <paramref name="queryString" />.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.op_Explicit(System.String)~AgileObjects.AgileMapper.QueryString">
            <summary>
            Converts the <paramref name="queryString" /> to a <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
            <param name="queryString">The query string-formatted string to convert.</param>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.QueryString"/> instance based on the given <paramref name="queryString"/>.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.Parse(System.String)">
            <summary>
            Factory method for converting a query string-formatted string into a <see cref="T:AgileObjects.AgileMapper.QueryString"/>
            instance.
            </summary>
            <param name="queryString">The query string-formatted string to convert.</param>
            <returns>
            A <see cref="T:AgileObjects.AgileMapper.QueryString"/> instance based on the given <paramref name="queryString"/>.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.ToString">
            <summary>
            Returns the query string-formatted representation of the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
            <returns>The query string-formatted representation of the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.GetEnumerator">
            <summary>
            Gets the enumerator for the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
            <returns>The enumerator for the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.</returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.Clear">
            <summary>
            Empties the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
        </member>
        <member name="P:AgileObjects.AgileMapper.QueryString.Count">
            <summary>
            Gets the number of KeyValuePairs in the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.Add(System.String,System.String)">
            <summary>
            Adds a new KeyValuePair to the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
            <param name="key">The key to use in the KeyValuePair.</param>
            <param name="value">The value to use in the KeyValuePair.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:AgileObjects.AgileMapper.QueryString"/> contains a KeyValuePair with the given <paramref name="key"/>.
            </summary>
            <param name="key">The key for which to make the determination.</param>
            <returns>
            True if the <see cref="T:AgileObjects.AgileMapper.QueryString"/> contains a KeyValuePair with the given <paramref name="key"/>, otherwise false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.Remove(System.String)">
            <summary>
            Removes the query string KeyValuePair with the given <paramref name="key"/> from the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
            <param name="key">The key of the KeyValuePair to remove.</param>
            <returns>
            True if the KeyValuePair is successfully removed; otherwise, false. False is also returned if no KeyValuePair
            exists in the <see cref="T:AgileObjects.AgileMapper.QueryString"/> with the given <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.QueryString.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the given <paramref name="key"/>.
            </summary>
            <param name="key">The key the value for which should be retrieved.</param>
            <param name="value">
            Populated with the value matching the given <paramref name="key"/> if one exists, otherwise set to null.
            </param>
            <returns>
            True if a value exists matching the given <paramref name="key"/>, otherwise false.
            </returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.QueryString.Item(System.String)">
            <summary>
            Gets or sets the query string value with the given <paramref name="key"/>.
            </summary>
            <param name="key">The key of the query string value to get or set.</param>
            <returns>The query string value with the specified key.</returns>
        </member>
        <member name="P:AgileObjects.AgileMapper.QueryString.Keys">
            <summary>
            Gets the set of keys contained in the <see cref="T:AgileObjects.AgileMapper.QueryString"/>.
            </summary>
        </member>
        <member name="T:AgileObjects.AgileMapper.Testing.StubServiceProvider">
            <summary>
            A stub service provider implementation, providing a simple GetService(Type) method for a set of predefined objects.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Testing.StubServiceProvider.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:AgileObjects.AgileMapper.Testing.StubServiceProvider"/> class using the given <paramref name="services"/>.
            Services will be cached in a Dictionary{Type, object} against their concrete and implemented interface Types; if more
            than one supplied object is of the same Type or implements the same interface, an Exception will be thrown.
            </summary>
            <param name="services">The objects to store and later make available in the service provider.</param>
        </member>
        <member name="M:AgileObjects.AgileMapper.Testing.StubServiceProvider.GetService(System.Type)">
            <summary>
            Gets the stored object of the given <paramref name="serviceType"/>, or attempts to create
            one using its parameterless constructor, if none was supplied in the constructor. If the
            Type was not supplied in the constructor and has no parameterless constructor, an Exception
            is thrown.
            </summary>
            <param name="serviceType">The Type of the service to retrieve.</param>
            <returns>
            The stored object of the given <paramref name="serviceType"/>, or ones created using
            its parameterless constructor, if none was supplied in the constructor.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.TypeConversion.IValueConverter">
            <summary>
            Implementing classes will convert a value type or string to another value type.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.TypeConversion.IValueConverter.CanConvert(System.Type,System.Type)">
            <summary>
            Gets a value indicating whether the <see cref="T:AgileObjects.AgileMapper.TypeConversion.IValueConverter"/> converts values of the given 
            <paramref name="nonNullableSourceType"/> to the given <paramref name="nonNullableTargetType"/>.
            </summary>
            <param name="nonNullableSourceType">The non-nullable type to evaluate.</param>
            <param name="nonNullableTargetType">The non-nullable type to evaluate.</param>
            <returns>
            True if the <see cref="T:AgileObjects.AgileMapper.TypeConversion.IValueConverter"/> converts the given 
            <paramref name="nonNullableTargetType"/>, otherwise false.
            </returns>
        </member>
        <member name="M:AgileObjects.AgileMapper.TypeConversion.IValueConverter.GetConversion(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Gets an Expression converting the given <paramref name="sourceValue"/> to the given 
            <paramref name="targetType"/>.
            </summary>
            <param name="sourceValue">The source value to convert.</param>
            <param name="targetType">The target type to which to convert to <paramref name="sourceValue"/>.</param>
            <returns>
            An Expression converting the given <paramref name="sourceValue"/> to the given 
            <paramref name="targetType"/>.
            </returns>
        </member>
        <member name="T:AgileObjects.AgileMapper.Validation.MappingValidationException">
            <summary>
            Provides details of a mapping validation failure.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Validation.MappingValidationException.#ctor">
            <summary>
            Initializes a new instance of the MappingValidationException class.
            </summary>
        </member>
        <member name="M:AgileObjects.AgileMapper.Validation.MappingValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MappingValidationException class with the given <paramref name="message"/>.
            </summary>
            <param name="message">The message detailing the mapping validation failure.</param>
        </member>
    </members>
</doc>
